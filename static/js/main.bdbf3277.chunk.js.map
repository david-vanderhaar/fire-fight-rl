{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateProjectile.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/push.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/game.js","nystrum/UI/Instructions.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/FireFighter.js","nystrum/Keymap/KeyActions/addDebris.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","getRandomInt","min","max","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","tile","tileKey","type","passable","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","water","PARTICLE_TYPE","directional","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","Message","uuid","this","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","messageType","args","addMessage","SprayWater","structure","Array","fill","reduce","acc","curr","concat","slot","forEach","position","addParticle","sign","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","DestroySelf","destroy","CursorMove","initiatedFrom","initiatedBy","cursorCanOccupyPosition","PlaceActor","forcePlacement","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","GrabDirection","grab","ReleaseGrab","release","Attack","entityTypes","includes","attack","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","isInitialized","child","actors","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","decreaseDurability","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","it","splice","Playing","keymap","nextAction","Chasing","targetEntity","Draggable","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","Burnable","UI_Actor","pipe","Speaker","messages","Debris","flammability","explosivity","FireSpread","timeToSpread","spreadCount","fire","enflame","explode","Player","getProjectile","pathToCheck","inPath","throwDirection","projectile","createPath","targetInPath","movePath","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","canBurn","step","nextPos","getNextPos","TYPE","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","hidden","w","activate","d","s","a","activateInventory","visibleInventory","ui","addActorAsPrevious","Escape","setNextAction","keymapEquipFromInventory","moveCursor","newX","newY","previousKeymap","goToPreviousKeymap","cursor","t","trigger","randomlyPlaceActorOnMap","chop","keyMapChop","keymapCursorToGrabEntity","initialKeymap","grabDirection","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","Display","containerId","width","height","tileWidth","tileHeight","tileGutter","tileOffset","stage","layer","document","getElementById","displayContainer","createElement","appendChild","Konva","Stage","Layer","hitGraphEnabled","add","node","Group","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","rect","Rect","strokeEnabled","Text","fontSize","align","verticalAlign","batchDraw","MAP_DATA","require","SOLANGE","GAME_MODE_TYPES","WAVE","TEST","PLAY","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","Game","mapInitialized","tileMap","mapWidth","mapHeight","getSelectedCharacter","display","mode","data","level","highestLevel","fireIntensity","npcCount","debrisCount","localStorage","getItem","setItem","addWaveEnemy","posXY","coord","addDebris","addFire","addNPC","nextModeLevel","initializeMode","propogateFire","burnEntities","hasLost","hasWon","increaseIntensity","initializeGameData","setModeLevel","resetIntensity","allSaved","players","box","lyrics","ent","burn","placed","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","JSON","parse","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","frame","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","createCustomLevel","initializeMap","initializeUI","handleKeyPress","event","code","Instructions","className","props","countNpcSafe","onClick","setActiveScreen","React","Component","Button","Keymap","entries","style","borderColor","Messages","Level","ENGINE","state","activeTab","createRef","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","top","setSelectedCharacter","Title","backgroundImage","backgroundRepeat","backgroundPosition","backgroundPositionY","g","debrisPosArray","debrisPos","f","axe","Item","Characters","FireFighter","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","bg","naruto","reciever","responded","RECIEVE","sender","Components","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdbf3277.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    const tile = map[x + \",\" + y];\n    if (tile) {\n      return (game.tileKey[tile.type].passable);\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n    ]\n  },\n  'WET': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.blue,\n    character: '=',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base0, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    passable: false,\n  },\n\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n  water: {\n    renderer: {\n      character: '~',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.blue,\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.messageType = messageType\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SprayWater extends Base {\n  constructor({ targetPos, radius = 1, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.radius = radius\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.water\n  }\n  perform() {\n\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.radius).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    const positions = structure.positions.map((slot) => {\n      return {\n        x: this.targetPos.x + slot.x + structure.x_offset,\n        y: this.targetPos.y + slot.y + structure.y_offset\n      }\n    }).concat({...this.targetPos});\n\n    positions.forEach((position) => {\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) { \n        if (tile.type === 'BURNT') tile.type = 'GROUND';\n        if (tile.type === 'FLOOR') tile.type = 'WET';\n      }\n    });\n\n    // adding particles\n    positions.forEach((pos) => {\n      this.addParticle(\n        3,\n        { ...pos },\n        {\n          x: Math.sign(pos.x - this.targetPos.x),\n          y: Math.sign(pos.y - this.targetPos.y)\n        },\n      )\n    })\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const initiatedFrom = this.actor.initiatedBy.pos; \n    const path = Helper.calculatePath(this.game, this.targetPos, initiatedFrom, 8);\n    const isInRange = this.actor.range ? path.length <= this.actor.range : true;\n\n    if (isInRange && this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n    this.interrupt = interrupt\n    this.forcePlacement = forcePlacement\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.release()) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    };\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless'}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, range = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n    this.range = range;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGING')\n    this.draggedEntity = draggedEntity;\n  }\n\n  grab (pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile) return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (!this.draggedEntity && entity.entityTypes.includes('DRAGGABLE')) {\n        this.draggedEntity = entity;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  release () {\n    if (!this.draggedEntity) return false;\n    this.draggedEntity = null;\n    return true;\n  }\n\n  drag (lastPos) {\n    // update entity position\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)]\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) }\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n\n  move (targetPos) {\n    const lastPos = {...this.pos}\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n}\n\nconst Draggable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE')\n  }\n}\n\nconst Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPREADING')\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n\n  getAction (game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR'].includes(newTile.type)\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      \n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: {x: 0, y: 0},\n          game,\n          renderer: {\n            character: '*',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        })\n\n        this.timeToSpread = this.timeToSpreadMax\n        this.spreadCount -= 1\n        \n        return new Action.PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        })\n      }\n      this.timeToSpread = this.timeToSpreadMax\n      this.spreadCount -= 1\n    }\n\n    this.timeToSpread -= 1;\n    \n    return new Action.Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    })\n  }\n}\n\n  const Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    this.renderer.character = this.durability;\n    this.game.draw()\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPEAKING')\n    this.messages = messages;\n    this.messageType = messageType\n  }\n\n  getAction (game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Action.Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n}\n\nconst Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('BURNABLE')\n  }\n\n  burn () {\n    this.decreaseDurability(1)\n    return true;\n  }\n}\n\nconst Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EXPLODING')\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n\n  enflame () {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      })\n    })\n\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire)\n    })\n  }\n\n  explode () {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      }\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) tile.type = 'BURNT';\n    });\n\n    // this.game.draw(); //may not need draw here\n  }\n\n  destroy () {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n}\n\nconst Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HELPLESS')\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const FireSpread = pipe (\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\nexport const axe = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: 'P',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move', hidden = false) => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n      hidden,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n      hidden,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n      hidden,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n      hidden,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst trigger = (engine, actor, radius = 1) => {\n  let cursor = engine.actors[engine.currentActor];\n\n  actor.setNextAction(\n    // new Action.Say({\n    //   game: engine.game,\n    //   actor,\n    //   message: 'I\\'ll crush you!',\n    //   energyCost: Constant.ENERGY_THRESHOLD\n    // })\n    new Action.SprayWater({\n      targetPos: { ...cursor.pos },\n      radius,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymap = (engine, initiatedBy, previousKeymap, radius) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(moveCursor, engine),\n    t: {\n      activate: () => {\n        trigger(engine, initiatedBy, radius);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const activateProjectile = (engine, radius) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    range: 3,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymap(engine, currentActor, { ...currentActor.keymap }, radius),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Bandit, RangedBandit, FireSpread } from '../../entites';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n}\n\nexport const addActor = (game) => {\n  // let targetEntity = game.engine.actors[game.engine.currentActor]\n  // let pos = Helper.getRandomPos(game.map).coordinates\n  // const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  // let actor = new banditStats.entityClass({\n  //   targetEntity,\n  //   pos,\n  //   renderer: banditStats.renderer,\n  //   name: banditStats.name,\n  //   game,\n  //   actions: [],\n  //   attackDamage: banditStats.attackDamage,\n  //   durability: banditStats.durability,\n  //   speed: banditStats.speed,\n  //   // directional projectile destruction breaks engine\n  //   getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n  //   // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  // })\n  let actor = new FireSpread({\n    name: 'Pyro',\n    game,\n    renderer: {\n      character: '*',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.red,\n    },\n    timeToSpread: 1,\n    spreadCount: 1,\n    durability: 1,\n    attackDamage: 1,\n    speed: 100,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { Shove } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Attack }from '../../actions'\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop Action',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap });\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor) => {\n  actor.setNextAction(\n    new Action.GrabDirection({\n      targetPos: { \n        x: actor.pos.x + direction[0],\n        y: actor.pos.y + direction[1],\n      },\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 18,\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  draw () {\n    this.layer.batchDraw();\n    // this.layer.draw();\n  }\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\nimport { addDebris  } from './Keymap/KeyActions/addDebris';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport { FireSpread, Speaker, Debris } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\n// const MAP_DATA = require('./Maps/building.json');\n// const MAP_DATA = require('./Maps/building_w_floor.json');\nconst MAP_DATA = require('./Maps/building_w_ambo.json');\nconst SOLANGE = require('./Data/solange.json');\n\nconst GAME_MODE_TYPES = {\n  WAVE: 0,\n  TEST: 1,\n  PLAY: 2,\n};\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 5;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    getSelectedCharacter = () => false,\n    display = new Display({\n      containerId: 'display',\n      width: (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET,\n      height: (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.PLAY,\n      data: {\n        level: 1,\n        highestLevel: null,\n        fireIntensity: 1, // increase this number to increase fire spread\n        npcCount: 1,\n        debrisCount: 4,\n      }\n    },\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    } \n    \n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      let array = Object.keys(this.map).filter((key) => this.map[key].type === 'FLOOR')\n\n      for (let index = 0; index < this.mode.data.debrisCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addDebris({ x: posXY[0], y: posXY[1] });\n      }\n\n      for (let index = 0; index < this.mode.data.fireIntensity; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addFire({x: posXY[0], y: posXY[1]});\n      }\n      \n      for (let index = 0; index < this.mode.data.npcCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addNPC({x: posXY[0], y: posXY[1]});\n      }\n        \n    }\n  }\n  \n  updateMode () { // this is run every game turn\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n\n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      this.propogateFire();\n      this.burnEntities();\n\n      if (this.hasLost()) {\n        return;\n        // this.resetMode();\n        // this.initializeGameData();\n      }\n      // triggerd once all npcs are saved\n      if (this.hasWon()) { \n        this.nextModeLevel();\n        this.increaseIntensity()\n        this.initializeGameData();\n      }\n    }\n\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      this.resetIntensity();\n    }\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  // Fire Fight Specific\n\n  increaseIntensity () {\n    this.mode.data.fireIntensity += 1;\n    this.mode.data.npcCount += 1;\n    this.mode.data.debrisCount += 1;\n  }\n\n  resetIntensity () {\n    this.mode.data.fireIntensity = 1;\n    this.mode.data.npcCount = 1;\n    this.mode.data.debrisCount = 4;\n  }\n\n  countNpcSafe () {\n    const helpless = this.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          return true;\n        }\n      }\n      return false\n    });\n    return helpless.length;\n  }\n\n  hasWon () {\n    let allSaved = true;\n    const helpless = this.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n\n    helpless.forEach((actor) => {\n      const tile = this.map[Helper.coordsToString(actor.pos)];\n      if (tile.type !== 'SAFE') {\n        allSaved = false;\n      }\n    })\n\n    return allSaved;\n  }\n\n  hasLost () {\n    const helpless = this.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.mode.data.npcCount) {\n      const players = this.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'));\n      if (players.length) players[0].destroy();\n      return true\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 1) {\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background: Constant.THEMES.SOLARIZED.base01,\n      },\n      name,\n      game: this,\n      durability,\n    })\n\n    this.placeActorOnMap(box)\n    this.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: 'Tobi Lou',\n      messages: SOLANGE.lyrics,\n      messageType: MESSAGE_TYPE.STATUS_EFFECT,\n      pos,\n      game: this,\n      renderer: {\n        character: 'T',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.placeActorOnMap(entity)) {\n      this.engine.addActor(entity);\n      this.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this,\n      renderer: {\n        character: '*',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n    })\n\n    if (this.placeActorOnMap(fire)) {\n      this.engine.addActor(fire);\n      this.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.mode.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.map).filter((key) => this.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.map).filter((key) => this.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n      }\n    })\n  }\n\n  // End\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = JSON.parse(tile.data);\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n    this.display.draw();\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    // this.createLevel();\n    this.createCustomLevel(MAP_DATA);\n    this.initializeMap();\n    this.draw();\n    // this.randomlyPlaceAllActorsOnMap()\n    this.placeActorsOnMap()\n    this.initializeMode();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"Instructions UI\">\n        <p className='flow-text'>\n          Save all of the citizens from the burning building and get them to the safe zone!\n        </p>\n        <div className='flow-text'>\n          <div className='Instructions__block'>{`Wave ${this.props.game.mode.data.level}`}</div>\n          <div className='Instructions__block'>{`${this.props.game.countNpcSafe()} of ${this.props.game.mode.data.npcCount} are safe!`}</div>\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}\n          >\n            <button className='btn btn-main' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>\n              Restart\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              const hidden = value.hasOwnProperty('hidden') ? value.hidden : false;\n              if (!hidden) {\n                return (\n                  <Button key={index} onClick={() => null} color='grey darken-1'>\n                    {key} {value.label}\n                  </Button>\n                )\n              }\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Instructions from '../UI/Instructions';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ engine: ENGINE, getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE)})\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <Instructions game={this.state.game} setActiveScreen={this.props.setActiveScreen} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n            <Messages messages={this.state.game.messages.slice(-3).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              Play Game\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#641b10',\n            backgroundImage: `url(\"/flume_2.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine, 'push', true),\n      t: {\n        activate: () => Keymap.activateProjectile(engine, 4),\n        label: 'water',\n      },\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      b: {\n        activate: () => Keymap.addDebris(engine.game),\n        label: 'Add Debris',\n      },\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add Actor',\n      },\n      f: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: 'Fire Fighter',\n    actions: [],\n    speed: 100,\n    durability: 4,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  const axe = Array(2).fill('').map(() => Item.axe(engine));\n  actor.container = [\n    new Entity.ContainerSlot({\n      itemType: axe[0].name,\n      items: axe,\n    }),\n  ]\n  return actor;\n}","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Debris } from '../../entites';\nimport * as Item from '../../items';\n\nexport const addDebris = (game, name = 'box', character = '%', durability = 10) => {    \n  let debrisPosArray = Object.keys(game.map).filter((key) => game.map[key].type === 'FLOOR')\n  let debrisPos = Helper.getRandomInArray(debrisPosArray);\n  let posXY = debrisPos.split(',').map((coord) => parseInt(coord))\n  let box = new Debris({\n    pos:{\n      x: posXY[0],\n      y: posXY[1]\n    },\n    renderer: {\n      character,\n      color: Constant.THEMES.SOLARIZED.base2,\n      background: Constant.THEMES.SOLARIZED.base01,\n    },\n    name,\n    game,\n    durability,\n  })\n  game.placeActorOnMap(box)\n  game.draw();\n}\n","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    // RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}