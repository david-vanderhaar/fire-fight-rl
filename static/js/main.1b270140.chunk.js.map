{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/items.js","nystrum/actions.js","nystrum/entites.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateProjectile.js","nystrum/Keymap/KeyActions/push.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/Maps/generator.js","nystrum/Modes/play.js","nystrum/Maps/helper.js","nystrum/Modes/default.js","nystrum/game.js","nystrum/UI/Instructions.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/FireFighter.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","getRandomInt","min","max","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","tile","tileKey","type","passable","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","sprite","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","GENERIC","EQUIPMENT_LAYOUTS","human","name","item","limited","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","succede","damage","leaf","water","PARTICLE_TYPE","directional","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","ERROR","Message","uuid","this","TYPE","waterGun","Entity","attackDamage","equipmentType","Constant","fireJacket","defense","Base","actor","energyCost","processDelay","particles","particleTemplate","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","messageType","args","addMessage","SprayWater","hasItemNameEquipped","ITEM_TYPES","structure","Array","fill","reduce","acc","curr","concat","slot","forEach","position","addParticle","sign","EquipItemFromTile","getItemInSlot","equip","it","UnequipItemToTile","unequip","splice","DestroySelf","destroy","CursorMove","initiatedFrom","initiatedBy","cursorCanOccupyPosition","PlaceActor","forcePlacement","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","GrabDirection","grab","ReleaseGrab","releasedEntity","release","Attack","entityTypes","includes","attack","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Parent","superclass","children","Engine","isInitialized","child","actors","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","additional","targets","target","getAttackDamage","equipment","decreaseDurability","Equipable","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","Playing","keymap","nextAction","Chasing","targetEntity","Draggable","Destructable","durability","onDestroy","getDefense","current","newDurability","Burnable","canBurn","willResetCanBurn","UI_Actor","pipe","Speaker","messages","Debris","flammability","explosivity","FireSpread","timeToSpread","spreadCount","fire","enflame","explode","Player","getProjectile","pathToCheck","inPath","throwDirection","projectile","createPath","targetInPath","movePath","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","itemName","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","Armor","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","step","nextPos","getNextPos","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","hidden","w","activate","d","s","a","activateEquipment","visibleEquipment","ui","addActorAsPrevious","Escape","setNextAction","keymapEquipment","moveCursor","newX","newY","previousKeymap","goToPreviousKeymap","cursor","t","trigger","chop","animations","display","addAnimation","removeAnimation","keyMapChop","keymapCursorToGrabEntity","initialKeymap","grabDirection","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","mode","ANIMATION_TYPES","Animation","lifeTime","node","frame","timeDiff","getActive","ExampleAnimation","BlinkTile","lerpDirection","rect","Konva","Rect","tileWidth","tileOffset","tileGutter","tileHeight","offsetX","offsetY","width","height","strokeEnabled","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","animationLayer","add","opacity","Display","containerId","cameraFollow","tilesWide","getTilesWide","tilesHigh","getTilesHigh","stage","layer","animationLoop","document","getElementById","displayContainer","createElement","appendChild","Stage","Layer","hitGraphEnabled","stop","anim","Group","Text","fontSize","fontFamily","align","verticalAlign","playerPos","tilesAcrossOnScreen","tilesDownOnScreen","bufferX","bufferY","getAbsoultueX","getAbsoultueY","batchDraw","createFloorPlan","createRoomInFloorPlan","floorPlan","origin","newUnit","getNeighboringUnit","unitAlreadyExists","unitExists","pnt","pos_two","pos_one","getNeighboringPoints","existingUnits","unit","getUnitPosition","floorPlanPos","mapOffsetX","mapOffsetY","unitSize","eightWay","neighbors","createUnit","size","border","unitCollidesWithEdge","j","newPosition","removeInnerWalls","coordArray","point","addInnerWalls","count","corners","wallCount","corner","wallNeighbors","selectedWallPos","build","currentPosition","previousFloorPositions","prevPos","Play","mapWidth","mapHeight","unitCount","data","unitPosition","didCreate","generateBuilding","MapHelper","placeInitialItems","placePlayersInSafeZone","debrisCount","posXY","coord","addDebris","gasCanCount","fireIntensity","addFire","npcCount","addNPC","turnCount","getSaveCountRequirement","propogateFire","burnEntities","checkRemoveSafeFloors","hasLost","reset","initializeGameData","hasWon","nextLevel","increaseIntensity","level","setLevel","resetIntensity","minimum","countNpcSafe","box","ent","burn","resetCanBurn","objects","Item","pop","players","player","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","canvasWidth","canvasHeight","Game","mapInitialized","tileMap","getSelectedCharacter","spriteMode","Mode","highestLevel","placed","randomlyPlaceActorOnMap","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","JSON","parse","placeInitialEntities","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","getPlayers","getEntityRenderer","getTileRenderer","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","createEmptyLevel","initializeMap","initializeUI","handleKeyPress","event","code","Instructions","modeDetails","className","props","onClick","setActiveScreen","toggleSpriteMode","React","Component","Button","Keymap","entries","style","borderColor","Messages","Level","ENGINE","state","activeTab","createRef","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","top","setSelectedCharacter","Title","backgroundImage","backgroundRepeat","backgroundPosition","backgroundPositionY","p","g","Characters","FireFighter","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","bg","naruto","reciever","responded","RECIEVE","sender","Components","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b270140.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const clamp = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    const tile = map[x + \",\" + y];\n    if (tile) {\n      return (game.tileKey[tile.type].passable);\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const NPC_NAME = 'Helpless Citizen';\nexport const PLAYER_NAME = 'Fire Fighter';\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    sprite: '',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'SAFE_FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n    ]\n  },\n  'WET': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.blue,\n    character: '=',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base0, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    sprite: '',\n    passable: false,\n  },\n  'DOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n  GENERIC: 'GENERIC',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  },\n  limited: () => {\n    return [\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_1', item: null},\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_2', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  succede: {\n    renderer: {\n      character: 'x',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.green,\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n  water: {\n    renderer: {\n      character: '~',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.blue,\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n  ERROR: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.yellow,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Entity from './entites';\nimport * as Constant from './constants';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  ARMOR: 'Armor',\n  WATER_GUN: 'Water Gun',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const axe = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'a',\n    sprite: '',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const waterGun = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.WATER_GUN,\n  passable: true,\n  attackDamage: 0,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'w',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.blue,\n    background: '',\n  },\n})\n\nexport const fireJacket = (engine) => new Entity.Armor({\n  game: engine.game,\n  name: 'Fire Jacket',\n  passable: true,\n  defense: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'J',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.magenta,\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\nimport { TYPE as ITEM_TYPES } from './items';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.messageType = messageType\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SprayWater extends Base {\n  constructor({ targetPos, radius = 1, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.radius = radius\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.water\n  }\n  perform() {\n\n    if (!this.actor.hasItemNameEquipped(ITEM_TYPES.WATER_GUN)) {\n      this.game.addMessage(`${this.actor.name} doesn't have a ${ITEM_TYPES.WATER_GUN}.`, MESSAGE_TYPE.ERROR);\n      return {\n        success: false,\n        alternative: null,\n      }\n    }\n\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.radius).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    const positions = structure.positions.map((slot) => {\n      return {\n        x: this.targetPos.x + slot.x + structure.x_offset,\n        y: this.targetPos.y + slot.y + structure.y_offset\n      }\n    }).concat({...this.targetPos});\n\n    positions.forEach((position) => {\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) { \n        if (tile.type === 'BURNT') tile.type = 'GROUND';\n        if (tile.type === 'FLOOR') tile.type = 'WET';\n      }\n    });\n\n    // adding particles\n    positions.forEach((pos) => {\n      this.addParticle(\n        3,\n        { ...pos },\n        {\n          x: Math.sign(pos.x - this.targetPos.x),\n          y: Math.sign(pos.y - this.targetPos.y)\n        },\n      )\n    })\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      // if (itemInSlot) {\n      //   this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      // }\n      if (itemInSlot) {\n        this.game.addMessage(`${this.actor.name}\\'s equipment slots are full.`, MESSAGE_TYPE.ERROR);\n      } else {\n        this.actor.equip(this.item.equipmentType, this.item);\n        let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n        this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n        success = true;\n        this.actor.energy -= this.energyCost;\n      }\n\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class UnequipItemToTile extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.splice(0, 0, this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const initiatedFrom = this.actor.initiatedBy.pos; \n    const path = Helper.calculatePath(this.game, this.targetPos, initiatedFrom, 8);\n    const isInRange = this.actor.range ? path.length <= this.actor.range : true;\n\n    if (isInRange && this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n    this.interrupt = interrupt\n    this.forcePlacement = forcePlacement\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n\n      // add particles\n      this.addParticle(\n        2,\n        { ...this.targetPos },\n        { x: 0, y: 0 },\n        Constant.PARTICLE_TEMPLATES.succede.renderer,\n      )\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const releasedEntity = this.actor.release()\n    \n    if (releasedEntity) {\n      this.actor.energy -= this.energyCost;\n      // add particles\n      this.addParticle(\n        2,\n        { ...releasedEntity.pos },\n        { x: 0, y: 0 },\n        Constant.PARTICLE_TEMPLATES.succede.renderer,\n      )\n      success = true;\n    };\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless'}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, range = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n    this.range = range;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  hasItemNameEquipped (itemName) {\n    const equipment = this.equipment.filter((slot) => {\n      if (slot.item) {\n        if (slot.item.name === itemName) {\n          return true;\n        }\n      }\n      return false;\n    })\n\n    return equipment.length > 0;\n\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n    return foundSlot;\n  }\n  \n  unequip (item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGING')\n    this.draggedEntity = draggedEntity;\n  }\n\n  grab (pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile) return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (!this.draggedEntity && entity.entityTypes.includes('DRAGGABLE')) {\n        this.draggedEntity = entity;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  release () {\n    if (!this.draggedEntity) return false;\n    const draggedEntity = {...this.draggedEntity};\n    this.draggedEntity = null;\n    return draggedEntity;\n  }\n\n  drag (lastPos) {\n    // update entity position\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)]\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) }\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n\n  move (targetPos) {\n    const lastPos = {...this.pos}\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n}\n\nconst Draggable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE')\n  }\n}\n\nconst Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPREADING')\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n\n  getAction (game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR', 'DOOR'].includes(newTile.type)\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      \n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: {x: 0, y: 0},\n          game,\n          renderer: {\n            character: '*',\n            sprite: '',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        })\n\n        this.timeToSpread = this.timeToSpreadMax\n        this.spreadCount -= 1\n        \n        return new Action.PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        })\n      }\n      this.timeToSpread = this.timeToSpreadMax\n      this.spreadCount -= 1\n    }\n\n    this.timeToSpread -= 1;\n    \n    return new Action.Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    })\n  }\n}\n\n  const Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    let defense = this.defense;\n    // add in reducer to get defense stats of all equpiment\n    if (this.entityTypes.includes('EQUIPING')) {\n      this.equipment.forEach((slot) => {\n        if (slot.item) {\n          if (slot.item.entityTypes.includes('DESTRUCTABLE')) {\n            defense += slot.item.getDefense();\n          }\n        }\n      });\n    }\n    \n    return defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    this.renderer.character = this.durability;\n    this.game.draw()\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPEAKING')\n    this.messages = messages;\n    this.messageType = messageType\n  }\n\n  getAction (game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Action.Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n}\n\nconst Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('BURNABLE')\n    this.canBurn = true;\n    this.willResetCanBurn = false;\n  }\n\n  resetCanBurn () {\n    this.willResetCanBurn = false;\n    this.canBurn = true;\n  }\n\n  burn () {\n    if (this.canBurn) {\n      this.decreaseDurability(2)\n      return true;\n    }\n    return false;\n  }\n}\n\nconst Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EXPLODING')\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n\n  enflame () {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      })\n    })\n\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire)\n    })\n  }\n\n  explode () {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      }\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) tile.type = 'BURNT';\n    });\n\n    // this.game.draw(); //may not need draw here\n  }\n\n  destroy () {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n}\n\nconst Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HELPLESS')\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const Armor = pipe(\n  Rendering, \n  Equipable, \n  Destructable,\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const FireSpread = pipe (\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move', hidden = false) => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n      hidden,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n      hidden,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n      hidden,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n      hidden,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem, UnequipItemToTile } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      initiatedBy.setNextAction(new UnequipItemToTile({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst trigger = (engine, actor, radius = 1) => {\n  let cursor = engine.actors[engine.currentActor];\n\n  actor.setNextAction(\n    // new Action.Say({\n    //   game: engine.game,\n    //   actor,\n    //   message: 'I\\'ll crush you!',\n    //   energyCost: Constant.ENERGY_THRESHOLD\n    // })\n    new Action.SprayWater({\n      targetPos: { ...cursor.pos },\n      radius,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymap = (engine, initiatedBy, previousKeymap, radius) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n    // make sure actor is burnable once targeting is complete or canceled\n    initiatedBy['willResetCanBurn'] = true;\n    \n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(moveCursor, engine),\n    t: {\n      activate: () => {\n        // make sure actor is burnable once targeting is complete or canceled\n        initiatedBy['canBurn'] = true;\n        trigger(engine, initiatedBy, radius);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const activateProjectile = (engine, radius, range = 2) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n  // prevent player from being burned while on fire.\n  currentActor['canBurn'] = false;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    range,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymap(engine, currentActor, { ...currentActor.keymap }, radius),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import { Shove } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Attack }from '../../actions'\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD, THEMES } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap, animations) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => {\n    initiatedBy.keymap = previousKeymap;\n    // animation code\n    if (animations.length) {\n      animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n    }\n    // end\n  }\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    DIRECTIONS.N,\n    DIRECTIONS.E,\n    DIRECTIONS.S,\n    DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  })\n  // end\n\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap }, animations);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport { coordsToString } from '../../../helper';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor, animation) => {\n  const pos = {\n    x: actor.pos.x + direction[0],\n    y: actor.pos.y + direction[1],\n  };\n  actor.setNextAction(\n    new Action.GrabDirection({\n      targetPos: pos,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD,\n    })\n  )\n}\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap, animations) => {\n  return {\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n        // animation code\n        if (animations.length) {\n          animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n        }\n        // end\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    Constant.DIRECTIONS.N,\n    Constant.DIRECTIONS.E,\n    Constant.DIRECTIONS.S,\n    Constant.DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: Constant.THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  }) \n  // end\n\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap, animations);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    // this.game.updateMode();\n    this.game.mode.update();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\nimport uuid from 'uuid/v1';\nimport * as Helper from '../../helper';\n\nexport const ANIMATION_TYPES = {\n  DEFAULT: 0,\n  BLINK_TILE: 1,\n  SOLID_TILE: 2,\n}\n\nclass Animation {\n  constructor({display}) {\n    const id = uuid();\n    this.id = id;\n    this.lifeTime = 0;\n    this.active = true;\n    this.display = display;\n    this.node = null;\n  }\n\n  getActive () {\n    return false;\n  }\n\n  initialize () {\n    return;\n  }\n\n  update (frame) {\n    this.lifeTime += frame.timeDiff;\n    this.active = this.getActive();\n    if (!this.active) {\n      this.display.removeAnimation(this.id);\n    }\n  }\n}\n\nclass ExampleAnimation extends Animation {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  getActive () {\n    if (this.lifeTime > 500) {\n      return false;\n    }\n    return true;\n  }\n}\n\nclass BlinkTile extends Animation {\n  constructor({\n    x,\n    y,\n    lerpDirection = -1,\n    color = '#fff',\n    ...args\n  }) {\n    super({ ...args });\n    this.x = x;\n    this.y = y;\n    this.lerpDirection = lerpDirection;\n    this.color = color;\n  }\n\n  getActive () {\n    return this.active;\n  }\n\n  initialize () {\n    this.active = true;\n    let rect = new Konva.Rect({\n      name: 'rect',\n      x: (this.display.tileWidth * this.x) + (this.display.tileOffset + this.display.tileGutter),\n      y: (this.display.tileHeight * this.y) + (this.display.tileOffset + this.display.tileGutter),\n      offsetX: this.display.tileWidth / -4,\n      offsetY: this.display.tileHeight / -4,\n      width: this.display.tileWidth / 2,\n      height: this.display.tileHeight / 2,\n      fill: this.color,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n    this.display.animationLayer.add(rect);\n    this.node = rect;\n    super.initialize();\n  }\n\n  update (frame) {\n    let opacity = this.node.opacity();\n    if (opacity >= 1) this.lerpDirection = -1;\n    if (opacity <= 0) this.lerpDirection = 1;\n    opacity += (0.05 * this.lerpDirection)\n    this.node.opacity(Helper.clamp(opacity, 0, 1))\n    super.update(frame);\n  }\n  \n}\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n    cameraFollow = false,\n    game = null,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tilesWide = this.getTilesWide(width, tileOffset, tileWidth);\n    this.tilesHigh = this.getTilesHigh(height, tileOffset, tileHeight);\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.cameraFollow = cameraFollow;\n    this.stage = null;\n    this.layer = null;\n    this.animationLayer = null;\n    this.animations = [];\n    this.animationLoop = null;\n    this.game = game;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    // setting up main tile map layer\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n    \n    // setting up animation layer\n    this.animationLayer = new Konva.Layer({});\n    this.stage.add(this.animationLayer);\n    let animationLoop = new Konva.Animation((frame) => {\n      this.animations.forEach((animation) => animation.update(frame))\n      // Stop animation updates if no animations to process\n      if (this.animations.length <= 0) {\n        if (this.animationLoop) {\n          if (this.animationLoop.isRunning()) {\n            this.animationLoop.stop();\n          }\n        }\n      }\n    }, this.animationLayer);\n    this.animationLoop = animationLoop;\n    animationLoop.start();\n  }\n\n  addAnimation (type, args) {\n    let animation;\n    switch (type) {\n      case ANIMATION_TYPES.DEFAULT:\n        animation = new Animation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.SOLID_TILE:\n        animation = new ExampleAnimation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.BLINK_TILE:\n        animation = new BlinkTile({display: this, ...args})\n        break;\n      \n      default:\n        animation = new Animation({ display: this, ...args})\n        break;\n    }\n    animation.initialize();\n    this.animations.push(animation)\n    if (!this.animationLoop.isRunning()) this.animationLoop.start();\n    return animation\n  }\n\n  removeAnimation (id) {\n    this.animations = this.animations.filter((anim) => {\n      if (anim.id !== id) return true;\n      // if anim is being removed, remove associated nodes and shapes too\n      anim.node.destroy();\n      return false;\n    });\n    \n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 24,\n      fontFamily: 'scroll-o-script',\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  getAbsoultueX(x) {\n    return (this.tileWidth * x) + (this.tileOffset + this.tileGutter)\n  }\n\n  getAbsoultueY(y) {\n    return (this.tileWidth * y) + (this.tileOffset + this.tileGutter)\n  }\n\n  getTilesWide (width, tileOffset, tileWidth) {\n    return Math.floor((width - tileOffset) / tileWidth)\n  }\n  \n  getTilesHigh(height, tileOffset, tileHeight) {\n    return Math.floor((height - tileOffset) / tileHeight)\n  }\n\n  draw (playerPos) {\n    if (this.cameraFollow && playerPos) {\n      const tilesWide = this.tilesWide;\n      const tilesHigh = this.tilesHigh;\n      const tilesAcrossOnScreen = Math.floor(this.width / this.tileWidth)\n      const tilesDownOnScreen = Math.floor(this.height / this.tileHeight)\n      \n      const bufferX = Math.ceil(tilesWide - (tilesAcrossOnScreen / 2));\n      const bufferY = Math.ceil(tilesHigh - (tilesDownOnScreen / 2));\n      let newX = 0;\n      let newY = 0;\n      if (playerPos.x > tilesWide - bufferX) {\n        newX = tilesWide - bufferX - playerPos.x\n      }\n      if (playerPos.y > tilesHigh - bufferY) {\n        newY = tilesHigh - bufferY - playerPos.y;\n      }\n      this.layer.x(this.getAbsoultueX(newX))\n      this.layer.y(this.getAbsoultueY(newY))\n    }\n    this.layer.batchDraw();\n    // this.animationLayer.batchDraw();\n    // this.layer.draw();\n  }\n}","import * as Helper from '../../helper';\n\nexport const generate = (map, offsetX, offsetY, unitCount = 12, unitSize = 4, borderWidth = 1) => {\n  let data = {};\n  // const floorPlan = createFloorPlan(unitCount);\n  // let maxX = 0; \n  // let minX = 0; \n  // let maxY = 0; \n  // let minY = 0; \n  // floorPlan.forEach((pos) => {\n  //   if (pos.x > maxX) maxX = pos.x;\n  //   if (pos.x < minX) minX = pos.x;\n  //   if (pos.y > maxY) maxY = pos.y;\n  //   if (pos.y < minY) minY = pos.y;\n  // })\n  // const floorPlanWidth = Math.abs(maxX) + Math.abs(minX) + 1;\n  // const floorPlanHeight = Math.abs(maxY) + Math.abs(minY) + 1;\n  // console.log(floorPlanWidth);\n  // console.log(floorPlanHeight);\n  \n  let floorPlan = createFloorPlan();\n  let kill = 1000\n  while (floorPlan.length < unitCount + 1) {\n    \n    let unit = createRoomInFloorPlan(floorPlan);\n    if (unit) {\n      const unitPosition = getUnitPosition(unit, offsetX, offsetY, unitSize);\n      let didCreate = createUnit(map, unitPosition, unitSize, 0);\n      if (didCreate) floorPlan.push(unit);\n    }\n    \n    kill -= 1;\n    if (kill <= 0) break;\n  }\n  \n  removeInnerWalls(map)\n  addInnerWalls(map, floorPlan.length)\n  return data;\n}\n\nconst createFloorPlan = () => {\n  // create origin\n  let floorPlan = [{x: 0, y: 0}];\n  return floorPlan\n}\n\nconst createRoomInFloorPlan = (floorPlan) => {\n  // randomly choose previously created unit\n  // let origin = floorPlan[floorPlan.length - 1];\n  let origin = Helper.getRandomInArray(floorPlan);\n  // randomly choose neighboring point\n  let newUnit = getNeighboringUnit(origin);\n  let unitAlreadyExists = unitExists(newUnit, floorPlan)\n  let kill = 1000\n  while (unitAlreadyExists) {\n    origin = Helper.getRandomInArray(floorPlan.filter((pnt) => !Helper.coordsAreEqual(pnt, origin)));\n    newUnit = getNeighboringUnit(origin);\n    unitAlreadyExists = unitExists(newUnit, floorPlan)\n    kill -= 1;\n    if (kill <= 0) {\n      unitAlreadyExists = false;\n      newUnit = false;\n      break;\n    }\n  }\n  \n  return newUnit\n}\n\nconst getNeighboringUnit = (origin) => Helper.getRandomInArray(getNeighboringPoints(origin))\nconst unitExists = (newUnit, existingUnits) => existingUnits.filter((unit) => unit.x === newUnit.x && unit.y === newUnit.y).length > 0;\nconst getUnitPosition = (floorPlanPos, mapOffsetX, mapOffsetY, unitSize) => {\n  return {\n    x: floorPlanPos.x + mapOffsetX + (unitSize * floorPlanPos.x),\n    y: floorPlanPos.y + mapOffsetY + (unitSize * floorPlanPos.y),\n  }\n}\n\nconst getNeighboringPoints = (origin, eightWay = false) => {\n  let neighbors = [\n    {\n      x: origin.x,\n      y: origin.y + 1\n    },\n    {\n      x: origin.x + 1,\n      y: origin.y\n    },\n    {\n      x: origin.x,\n      y: origin.y - 1\n    },\n    {\n      x: origin.x - 1,\n      y: origin.y\n    },\n  ]\n\n  if (eightWay) {\n    neighbors = neighbors.concat([\n      {\n        x: origin.x + 1,\n        y: origin.y + 1\n      },\n      {\n        x: origin.x + 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y + 1\n      },\n    ])\n  }\n  return neighbors;\n}\n\nconst createUnit = (map, position, size, border) => {\n  // const length = size; // this will leave a border\n  // const length = size + 1; // this will close the gap\n  const length = size + 1 - border; // this will calculate using border\n\n  // prevent units from hitting map edge\n  let unitCollidesWithEdge = false;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length; j++) {\n      const newPosition = {\n        x: position.x + i,\n        y: position.y + j,\n      }\n      let tile = map[Helper.coordsToString(newPosition)];\n      if (!tile) unitCollidesWithEdge = true;\n    }\n  }\n\n  if (!unitCollidesWithEdge) {\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        const newPosition = {\n          x: position.x + i,\n          y: position.y + j,\n        }\n        let type = 'FLOOR';\n        if (i === 0 || i === (length - 1)) type = 'WALL';\n        if (j === 0 || j === (length - 1)) type = 'WALL';\n        let tile = map[Helper.coordsToString(newPosition)];\n        if (tile) tile.type = type;\n      }\n    }\n  }\n\n  return !unitCollidesWithEdge;\n}\n\nconst removeInnerWalls = (map) => {\n  let walls = Object.keys(map).filter((key) => {\n    return map[key].type === 'WALL';\n  })\n\n  let innerWalls = walls.filter((key) => {\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, true).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL', 'FLOOR'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    \n    if (neighbors.length === 8) {\n      return true;\n    }\n    return false;\n  })\n\n  innerWalls.forEach((key) => {\n    map[key].type = 'FLOOR';\n  })\n}\n\nconst addInnerWalls = (map, count = 2) => {\n  // Finding corners\n  let corners = Object.keys(map).filter((key) => {\n    const tile = map[key];\n    if (tile.type !== 'WALL') return false;\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['GROUND'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    if (neighbors.length === 2) return true;\n    return false\n  })\n\n  // building walls\n  let wallCount = 0;\n  while (wallCount < count) {\n  // while (wallCount < corners.length) {\n  // for (let i = 0; i < count; i++) {\n    const corner = Helper.getRandomInArray(corners);\n    const coordArray = corner.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const wallNeighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    const selectedWallPos = Helper.getRandomInArray(wallNeighbors)\n    if (!selectedWallPos) continue;\n    const direction = {\n      x: Math.sign(selectedWallPos.x - coords.x),\n      y: Math.sign(selectedWallPos.y - coords.y)\n    };\n\n    let kill = 100;\n    let build = true;\n    let currentPosition = {...coords}\n    let previousFloorPositions = [];\n    while (build) {\n      currentPosition.x += direction.x;\n      currentPosition.y += direction.y;\n      let tile = map[Helper.coordsToString(currentPosition)];\n      if (!tile) break;\n      // if (tile.type === 'WALL') continue;\n      if (tile.type === 'FLOOR') {\n        tile.type = 'WALL';\n        previousFloorPositions.push({...currentPosition})\n        // console.log(previousFloorPositions.length);\n        \n      } else if (tile.type === 'GROUND' || (tile.type === 'WALL' && previousFloorPositions.length)) {\n        // go back two and make FLOOR\n        let prevPos = {\n          x: currentPosition.x - (direction.x * 2),\n          y: currentPosition.y - (direction.y * 2),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        // go back one more and make FLOOR\n        prevPos = {\n          x: currentPosition.x - (direction.x * 3),\n          y: currentPosition.y - (direction.y * 3),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        if (previousFloorPositions.length <= 0) {\n          //   // we need to create another wall, this one is bust\n          if (count <= 100) count += 1\n        }\n        break;\n      }\n      kill -= 1;\n      if (kill <= 0) build = false;\n    }\n    wallCount += 1;\n  }\n}","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport * as Item from '../items';\nimport * as MapHelper from '../Maps/helper';\nimport { generate as generateBuilding } from '../Maps/generator';\nimport { FireSpread, Speaker, Debris } from '../entites';\nimport { MESSAGE_TYPE } from '../message';\nimport { Mode } from './default';\n\nexport class Play extends Mode {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  initialize () {\n    super.initialize();\n    const offsetX = Math.floor(this.game.mapWidth / 2)\n    const offsetY = Math.floor(this.game.mapHeight / 2)\n    generateBuilding(this.game.map, offsetX, offsetY);\n    MapHelper.addTileZone(\n      { x: 0, y: 0 },\n      3,\n      'SAFE',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    this.placeInitialItems();\n    this.placePlayersInSafeZone();\n\n    let array = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'FLOOR')\n    for (let index = 0; index < this.data.debrisCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.gasCanCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'gas can', 'X', 1, 3, Constant.THEMES.SOLARIZED.orange);\n    }\n    for (let index = 0; index < this.data.fireIntensity; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addFire({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.npcCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addNPC({ x: posXY[0], y: posXY[1] });\n    }\n  }\n\n  checkRemoveSafeFloors () {\n    const currentActor = this.game.engine.actors[this.game.engine.currentActor];\n    if (currentActor.name !== Constant.PLAYER_NAME) return;\n\n    this.data.turnCount += 1;\n    if (this.data.turnCount > this.getSaveCountRequirement() * 50) {\n      Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE_FLOOR').forEach((key) => {\n        this.game.map[key].type = 'FLOOR';\n      });\n\n    }\n  }\n\n  update () {\n    super.update();\n    this.propogateFire();\n    this.burnEntities();\n    this.checkRemoveSafeFloors();\n    if (this.hasLost()) {\n      this.reset();\n      this.game.initializeGameData();\n    }\n    // triggerd once all npcs are saved\n    if (this.hasWon()) {\n      this.nextLevel();\n      this.increaseIntensity()\n      this.game.initializeGameData();\n    }\n  }\n  \n  //Extras\n\n  setLevel (level) {\n    this.data.level = level;\n    this.data.turnCount = 0;\n  }\n\n  nextLevel () {\n    this.setLevel(this.data.level + 1);\n  }\n\n  reset () {\n    this.resetIntensity();\n    this.setLevel(1);\n    this.initialize();\n  }\n\n  increaseIntensity () {\n    switch (this.data.level) {\n      case 1:\n        this.data.fireIntensity = 1;\n        this.data.npcCount = 1;\n        this.data.debrisCount = 4;\n        this.data.gasCanCount = 0;\n        break;\n      case 2:\n        this.data.fireIntensity = 2;\n        this.data.npcCount = 1;\n        this.data.debrisCount = 4;\n        this.data.gasCanCount = 1;\n        break;\n      case 3:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 50;\n        this.data.gasCanCount = 1;\n        break;\n      case 4:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 6;\n        this.data.gasCanCount = 3;\n        break;\n      case 5:\n        this.data.fireIntensity = 5;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 6;\n        this.data.gasCanCount = 3;\n        break;\n      case 6:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 10;\n        this.data.gasCanCount = 3;\n        break;\n      case 7:\n        this.data.fireIntensity = 1;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 80;\n        this.data.gasCanCount = 25;\n        break;\n      case 8:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.gasCanCount = 6;\n        break;\n      default:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.gasCanCount = 5;\n        break;\n    }\n  }\n\n  resetIntensity () {\n    this.data.fireIntensity = 1;\n    this.data.npcCount = 1;\n    this.data.debrisCount = 4;\n  }\n\n  countNpcSafe () {\n    const helpless = this.game.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.game.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          return true;\n        }\n      }\n      return false\n    });\n\n    return helpless.length;\n  }\n\n  getSaveCountRequirement () {\n    const minimum = Math.ceil(this.data.npcCount * 0.66);\n    return Math.max(1, minimum);\n  }\n\n  hasWon () {\n    return this.countNpcSafe() >= this.getSaveCountRequirement();\n  }\n\n  hasLost () {\n    const helpless = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.getSaveCountRequirement()) {\n      return true;\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 5, explosivity = 0, background = Constant.THEMES.SOLARIZED.base01) {\n    let sprite = Helper.getRandomInArray(['', '', '', '', '', '']);\n    if (explosivity > 0) sprite = ''\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        sprite,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background,\n      },\n      name,\n      game: this.game,\n      durability,\n      explosivity,\n      flammability: 0,\n    })\n\n    this.game.placeActorOnMap(box)\n    this.game.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: Constant.NPC_NAME,\n      // messages: SOLANGE.lyrics,\n      messages: ['help!', 'ahh!', 'It\\'s getting hot in hurr.'],\n      messageType: MESSAGE_TYPE.ACTION,\n      pos,\n      game: this.game,\n      renderer: {\n        character: 'C',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.game.placeActorOnMap(entity)) {\n      const tile = this.game.map[Helper.coordsToString(entity.pos)];\n      tile.type = 'SAFE_FLOOR';\n      this.game.engine.addActor(entity);\n      this.game.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this.game,\n      renderer: {\n        character: '*',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 2,\n      speed: 100,\n    })\n\n    if (this.game.placeActorOnMap(fire)) {\n      this.game.engine.addActor(fire);\n      this.game.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.game.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.game.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.game.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n        if (ent.willResetCanBurn) ent.resetCanBurn();\n      }\n    })\n  }\n\n  placeInitialItems () {\n    let objects = [\n      Item.axe(this.game.engine),\n      Item.waterGun(this.game.engine),\n      Item.fireJacket(this.game.engine),\n    ];\n\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n\n    objects.forEach((item) => {\n      const key = keys.pop();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        item.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(item);\n        }\n      }\n    })\n  }\n\n  placePlayersInSafeZone () {\n    let players = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n    players.forEach((player) => {\n      const key = keys.shift();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        player.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(player);\n        }\n      }\n    })\n  }\n\n}\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\n\nexport const addTileZone = (origin = { x: 0, y: 0 }, size = 3, type = 'GROUND', map, mapHeight, mapWidth) => {\n  for (let i = 0; i < mapHeight; i++) {\n    for (let j = 0; j < mapWidth; j++) {\n      if (i >= origin.y && i <= origin.y + (size - 1) && j >= origin.x && j <= origin.x + (size - 1)) {\n        const key = `${j},${i}`\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n}","import uuid from 'uuid/v1';\n\nexport class Mode {\n  constructor({\n    game = null,\n    data = {},\n  }) {\n    let id = uuid();\n    this.id = id;\n    this.game = game;\n    this.data = data;\n  }\n\n  initialize() {}\n\n  update() {}\n\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport * as Mode from './Modes/index';\n\n// const MAP_DATA = require('./Maps/building.json');\n// const MAP_DATA = require('./Maps/building_w_floor.json');\n// const MAP_DATA = require('./Maps/building_w_ambo.json');\n// const SOLANGE = require('./Data/solange.json');\n\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 5;\nconst canvasWidth = (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET;\nconst canvasHeight = (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    getSelectedCharacter = () => false,\n    display = new Display({\n      containerId: 'display',\n      width: canvasWidth,\n      height: canvasHeight,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n      cameraFollow: false,\n      game: this,\n    }),\n    spriteMode = true,\n    tileKey = Constant.TILE_KEY,\n    mode = new Mode.Play({\n      game: this,\n      data: {\n        level: 1,\n        highestLevel: null,\n        fireIntensity: 1, // increase this number to increase fire spread\n        npcCount: 1,\n        debrisCount: 4,\n        gasCanCount: 0,\n        turnCount: 0,\n      },\n    }),\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.spriteMode = spriteMode;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    this.mode.initialize();\n  }\n  \n  updateMode () { // this is run every game turn\n    this.mode.update();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createEmptyLevel () {\n    for (let i = 0; i < this.mapHeight; i ++) {\n      for (let j = 0; j < this.mapWidth; j ++) {\n        const key = `${j},${i}`\n        let type = 'GROUND';\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        this.map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = JSON.parse(tile.data);\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n    \n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n\n    this.placeInitialEntities();\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      // let { foreground, background } = this.tileKey[tile.type]\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      let character = nextFrame.character;\n      let foreground = nextFrame.foreground;\n      let background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n\n  getPlayers () {\n    return this.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n\n    let playerPos = null;\n    const players = this.getPlayers();\n    if (players.length) { playerPos = players[0].pos }\n\n    this.display.draw(playerPos);\n  }\n\n  getEntityRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite, foreground: renderer.color}\n      // return {character: renderer.sprite, foreground: renderer.background, background: ''}\n    }\n    // else us the ascii character\n    return {...renderer, foreground: renderer.color}\n  }\n\n  getTileRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite}\n    }\n    // else us the ascii character\n    return renderer\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let { character, foreground, background } = this.getEntityRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getEntityRenderer(renderer.animation[entity.currentFrame]);\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = this.getTileRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getTileRenderer(renderer.animation[tile.currentFrame]);\n      character = frame.character\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.createEmptyLevel();\n    // this.createLevel();\n    // this.createCustomLevel(MAP_DATA);\n    this.initializeMap();\n    this.draw();\n    // this.randomlyPlaceAllActorsOnMap()\n    // this.placeActorsOnMap()\n    // this.initializeMode();\n    this.mode.initialize();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n    // hack to register sprite mode\n    setTimeout(() => {\n      this.spriteMode = false;\n      this.draw()\n    }, 100)\n    setTimeout(() => {\n      this.spriteMode = true;\n      this.draw()\n    }, 100)\n    // end hack\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nclass Instructions extends React.Component {\n  render() {\n    let modeDetails = null;\n    try {\n      modeDetails = (\n        <span>\n          <div className='Instructions__block'>{`Wave ${this.props.game.mode.data.level}`}</div>\n          <div className='Instructions__block'>\n            {\n              `${this.props.game.mode.countNpcSafe()} of  ${this.props.game.mode.getSaveCountRequirement()} are safe!`\n            }\n          </div>\n        </span>\n      );\n    } catch { return }\n\n    return (\n      <div className=\"Instructions UI\">\n        <p className='flow-text'>\n          Save all of the citizens from the burning building and get them to the safe zone!\n        </p>\n        <div className='flow-text'>\n          { modeDetails }\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}\n          >\n            {/* <button className='btn btn-main' onClick={() => window.location.reload()}>\n              Restart\n            </button> */}\n            {/* <button className='btn btn-main' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>\n              Restart\n            </button> */}\n            <button className='btn btn-main'>\n              Restart\n            </button>\n          </div>\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.toggleSpriteMode()}\n          >\n            <button className='btn btn-main'>\n              {\n                this.props.spriteMode ? (\n                  'ASCII mode'\n                ) : (\n                  'Sprite mode'\n                )\n              }\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              const hidden = value.hasOwnProperty('hidden') ? value.hidden : false;\n              if (!hidden) {\n                return (\n                  <Button key={index} onClick={() => null} color='grey darken-1'>\n                    {key} {value.label}\n                  </Button>\n                )\n              }\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Instructions from '../UI/Instructions';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ engine: ENGINE, getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE)})\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n      spriteMode: game.spriteMode,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  toggleSpriteMode () {\n    this.state.game.spriteMode = !this.state.game.spriteMode;\n    this.state.game.draw();\n    this.presserRef.current.focus();\n    this.setState({ spriteMode: this.state.game.spriteMode})\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <Instructions game={this.state.game} spriteMode={this.state.game.spriteMode} setActiveScreen={this.props.setActiveScreen} toggleSpriteMode={this.toggleSpriteMode.bind(this)} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n            <Messages messages={this.state.game.messages.slice(-5).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              Play Game\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine, 'push', true),\n      t: {\n        activate: () => Keymap.activateProjectile(engine, 1, 5),\n        label: 'shoot water',\n      },\n      c: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n      e: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'equipment',\n      },\n      p: {\n        activate: () => Keymap.equipRandomFromTile(engine),\n        label: 'pick up',\n      },\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      sprite: '',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: Constant.PLAYER_NAME,\n    equipment: Constant.EQUIPMENT_LAYOUTS.limited(),\n    actions: [],\n    speed: 100,\n    durability: 4,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  // const axe = Array(2).fill('').map(() => Item.axe(engine));\n  // actor.container = [\n  //   new Entity.ContainerSlot({\n  //     itemType: axe[0].name,\n  //     items: axe,\n  //   }),\n  // ]\n  return actor;\n}","import { PickupItem, EquipItemFromTile } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\nimport { MESSAGE_TYPE } from '../../message';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};\n\nexport const equipRandomFromTile = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new EquipItemFromTile({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    engine.game.addMessage(`nothing to equip.`, MESSAGE_TYPE.ACTION);\n  }\n};","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    // RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}