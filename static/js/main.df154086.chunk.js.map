{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/items.js","nystrum/sounds.js","nystrum/actions.js","nystrum/entites.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateProjectile.js","nystrum/Keymap/KeyActions/push.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/Maps/generator.js","nystrum/Modes/play.js","nystrum/Maps/helper.js","nystrum/Modes/default.js","nystrum/game.js","nystrum/UI/Instructions.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","original/components/index.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Screen/Lose.js","nystrum/Characters/FireFighter.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","getRandomInt","min","max","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","tile","tileKey","type","passable","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","sprite","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","EQUIPMENT_LAYOUTS","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","succede","damage","leaf","water","PARTICLE_TYPE","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","ERROR","Message","uuid","this","TYPE","waterGun","Entity","attackDamage","equipmentType","Constant","fireJacket","defense","Howl","src","fire_0","volume","loop","fire_1","scream_0","scream_1","scream_2","water_0","water_1","chop_0","chop_1","equip_0","equip_1","explosion_0","save","lose","grab_0","release_0","Base","actor","energyCost","processDelay","particles","particleTemplate","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","messageType","args","addMessage","SprayWater","hasItemNameEquipped","ITEM_TYPES","structure","Array","fill","reduce","acc","curr","concat","slot","forEach","position","addParticle","sign","SOUNDS","play","EquipItemFromTile","getItemInSlot","equip","it","UnequipItemToTile","unequip","splice","DestroySelf","destroy","CursorMove","initiatedFrom","initiatedBy","cursorCanOccupyPosition","PlaceActor","forcePlacement","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","GrabDirection","grab","ReleaseGrab","releasedEntity","release","Attack","entityTypes","includes","attack","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Parent","superclass","children","Engine","isInitialized","child","actors","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","additional","targets","target","getAttackDamage","equipment","decreaseDurability","Equipable","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","Playing","keymap","nextAction","Chasing","targetEntity","Draggable","Destructable","durability","onDestroy","getDefense","current","newDurability","Burnable","canBurn","willResetCanBurn","UI_Actor","pipe","Speaker","messages","saved","Debris","flammability","explosivity","FireSpread","timeToSpread","spreadCount","fire","enflame","explode","Player","getProjectile","pathToCheck","inPath","throwDirection","projectile","createPath","targetInPath","movePath","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","itemName","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","Armor","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","step","nextPos","getNextPos","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","hidden","w","activate","d","s","a","activateEquipment","visibleEquipment","ui","addActorAsPrevious","Escape","setNextAction","keymapEquipment","moveCursor","newX","newY","previousKeymap","goToPreviousKeymap","cursor","t","trigger","chop","animations","display","addAnimation","removeAnimation","keyMapChop","keymapCursorToGrabEntity","initialKeymap","grabDirection","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","visibleKeymap","updateMode","updateReact","sort","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","mode","ANIMATION_TYPES","Animation","lifeTime","node","frame","timeDiff","getActive","ExampleAnimation","BlinkTile","lerpDirection","rect","Konva","Rect","tileWidth","tileOffset","tileGutter","tileHeight","offsetX","offsetY","width","height","strokeEnabled","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","animationLayer","add","opacity","Display","containerId","cameraFollow","tilesWide","getTilesWide","tilesHigh","getTilesHigh","stage","layer","animationLoop","document","getElementById","displayContainer","createElement","appendChild","Stage","Layer","hitGraphEnabled","stop","anim","Group","Text","fontSize","fontFamily","align","verticalAlign","playerPos","tilesAcrossOnScreen","tilesDownOnScreen","bufferX","bufferY","getAbsoultueX","getAbsoultueY","batchDraw","createFloorPlan","createRoomInFloorPlan","floorPlan","origin","newUnit","getNeighboringUnit","unitAlreadyExists","unitExists","pnt","pos_two","pos_one","getNeighboringPoints","existingUnits","unit","getUnitPosition","floorPlanPos","mapOffsetX","mapOffsetY","unitSize","eightWay","neighbors","createUnit","size","border","unitCollidesWithEdge","j","newPosition","removeInnerWalls","coordArray","point","addInnerWalls","count","corners","wallCount","corner","wallNeighbors","selectedWallPos","build","currentPosition","previousFloorPositions","prevPos","Play","mapWidth","mapHeight","unitCount","data","unitPosition","didCreate","generateBuilding","MapHelper","placeInitialItems","placePlayersInSafeZone","debrisCount","posXY","coord","addDebris","gasCanCount","fireIntensity","addFire","npcCount","addNPC","playing","turnCount","getSaveCountRequirement","propogateFire","burnEntities","checkRemoveSafeFloors","hasLost","reset","initializeGameData","hasWon","nextLevel","increaseIntensity","level","setLevel","resetIntensity","minimum","countNpcSafe","toLose","box","ent","burn","resetCanBurn","objects","Item","pop","players","player","Game","mapInitialized","tileMap","getSelectedCharacter","MAP_WIDTH","MAP_HEIGHT","spriteMode","Mode","highestLevel","placed","randomlyPlaceActorOnMap","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","JSON","parse","placeInitialEntities","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","getPlayers","getEntityRenderer","getTileRenderer","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","createEmptyLevel","initializeMap","initializeUI","handleKeyPress","event","code","Instructions","modeDetails","className","props","onClick","setActiveScreen","toggleSpriteMode","React","Component","Button","Keymap","entries","style","borderColor","world","Messages","Level","ENGINE","state","activeTab","createRef","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","top","setSelectedCharacter","Title","backgroundImage","backgroundRepeat","backgroundPosition","backgroundPositionY","Lose","p","g","Characters","FireFighter","Nystrum","characterKey","selected","activeScreen","titleScreen","loseScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","bg","naruto","reciever","responded","RECIEVE","sender","Components","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df154086.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n  LOSE: 2,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const clamp = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    const tile = map[x + \",\" + y];\n    if (tile) {\n      return (game.tileKey[tile.type].passable);\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const NPC_NAME = 'Helpless Citizen';\nexport const PLAYER_NAME = 'Fire Fighter';\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    sprite: '',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'SAFE_FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n    ]\n  },\n  'WET': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.blue,\n    character: '=',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base0, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    sprite: '',\n    passable: false,\n  },\n  'DOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n  GENERIC: 'GENERIC',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  },\n  limited: () => {\n    return [\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_1', item: null},\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_2', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  succede: {\n    renderer: {\n      character: 'x',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.green,\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n  water: {\n    renderer: {\n      character: '~',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.blue,\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n  ERROR: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.yellow,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Entity from './entites';\nimport * as Constant from './constants';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  ARMOR: 'Armor',\n  WATER_GUN: 'Water Gun',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const axe = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'a',\n    sprite: '',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const waterGun = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.WATER_GUN,\n  passable: true,\n  attackDamage: 0,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'w',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.blue,\n    background: '',\n  },\n})\n\nexport const fireJacket = (engine) => new Entity.Armor({\n  game: engine.game,\n  name: 'Fire Jacket',\n  passable: true,\n  defense: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'J',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.magenta,\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { Howl, Howler } from 'howler';\n\nconst sound = new Howl({\n  src: ['/sounds/explosion-00.wav']\n});\n\nexport default {\n  fire_0: new Howl({\n    src: ['/sounds/fire-00.mp3'],\n    volume: 0.5,\n    loop: true,\n  }),\n  fire_1: new Howl({\n    src: ['/sounds/fire-01.mp3'],\n    volume: 0.05,\n    loop: true,\n  }),\n  scream_0: new Howl({\n    src: ['/sounds/scream-00.wav']\n  }),\n  scream_1: new Howl({\n    src: ['/sounds/scream-01.wav']\n  }),\n  scream_2: new Howl({\n    src: ['/sounds/scream-02.wav']\n  }),\n  water_0: new Howl({\n    src: ['/sounds/water-04.wav']\n  }),\n  water_1: new Howl({\n    src: ['/sounds/water-05.wav']\n  }),\n  chop_0: new Howl({\n    src: ['/sounds/chop-00.wav']\n  }),\n  chop_1: new Howl({\n    src: ['/sounds/chop-01.wav']\n  }),\n  equip_0: new Howl({\n    src: ['/sounds/equip-00.wav']\n  }),\n  equip_1: new Howl({\n    src: ['/sounds/equip-01.wav']\n  }),\n  explosion_0: new Howl({\n    src: ['/sounds/explosion-00.wav'],\n    volume: 0.2,\n  }),\n  save: new Howl({\n    src: ['/sounds/save.wav'],\n  }),\n  lose: new Howl({\n    src: ['/sounds/lose-00.wav'],\n  }),\n  grab_0: new Howl({\n    src: ['/sounds/grab-00.wav'],\n  }),\n  release_0: new Howl({\n    src: ['/sounds/grab-01.wav'],\n  }),\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\nimport { TYPE as ITEM_TYPES } from './items';\nimport SOUNDS from './sounds';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.messageType = messageType\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SprayWater extends Base {\n  constructor({ targetPos, radius = 1, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.radius = radius\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.water\n  }\n  perform() {\n\n    if (!this.actor.hasItemNameEquipped(ITEM_TYPES.WATER_GUN)) {\n      this.game.addMessage(`${this.actor.name} doesn't have a ${ITEM_TYPES.WATER_GUN}.`, MESSAGE_TYPE.ERROR);\n      return {\n        success: false,\n        alternative: null,\n      }\n    }\n\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.radius).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    const positions = structure.positions.map((slot) => {\n      return {\n        x: this.targetPos.x + slot.x + structure.x_offset,\n        y: this.targetPos.y + slot.y + structure.y_offset\n      }\n    }).concat({...this.targetPos});\n\n    positions.forEach((position) => {\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) { \n        if (tile.type === 'BURNT') tile.type = 'GROUND';\n        if (tile.type === 'FLOOR') tile.type = 'WET';\n      }\n    });\n\n    // adding particles\n    positions.forEach((pos) => {\n      this.addParticle(\n        3,\n        { ...pos },\n        {\n          x: Math.sign(pos.x - this.targetPos.x),\n          y: Math.sign(pos.y - this.targetPos.y)\n        },\n      )\n    })\n\n    // sounds\n    const sound = Helper.getRandomInArray([SOUNDS.water_0, SOUNDS.water_1])\n    sound.play();\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      // if (itemInSlot) {\n      //   this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      // }\n      if (itemInSlot) {\n        this.game.addMessage(`${this.actor.name}\\'s equipment slots are full.`, MESSAGE_TYPE.ERROR);\n      } else {\n        this.actor.equip(this.item.equipmentType, this.item);\n        let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n        this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n        success = true;\n        this.actor.energy -= this.energyCost;\n      }\n\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class UnequipItemToTile extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.splice(0, 0, this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const initiatedFrom = this.actor.initiatedBy.pos; \n    const path = Helper.calculatePath(this.game, this.targetPos, initiatedFrom, 8);\n    const isInRange = this.actor.range ? path.length <= this.actor.range : true;\n\n    if (isInRange && this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n    this.interrupt = interrupt\n    this.forcePlacement = forcePlacement\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n\n      // add particles\n      this.addParticle(\n        2,\n        { ...this.targetPos },\n        { x: 0, y: 0 },\n        Constant.PARTICLE_TEMPLATES.succede.renderer,\n      )\n\n      SOUNDS.grab_0.play();\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const releasedEntity = this.actor.release()\n    \n    if (releasedEntity) {\n      this.actor.energy -= this.energyCost;\n      // add particles\n      this.addParticle(\n        2,\n        { ...releasedEntity.pos },\n        { x: 0, y: 0 },\n        Constant.PARTICLE_TEMPLATES.succede.renderer,\n      )\n      success = true;\n      SOUNDS.release_0.play();\n    };\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      const sound = Helper.getRandomInArray([SOUNDS.chop_0, SOUNDS.chop_1])\n      sound.play();\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\nimport SOUNDS from './sounds';\n\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless'}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, range = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n    this.range = range;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  hasItemNameEquipped (itemName) {\n    const equipment = this.equipment.filter((slot) => {\n      if (slot.item) {\n        if (slot.item.name === itemName) {\n          return true;\n        }\n      }\n      return false;\n    })\n\n    return equipment.length > 0;\n\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n        SOUNDS.equip_1.play();\n      }\n      return slot;\n    })\n    return foundSlot;\n  }\n  \n  unequip (item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n          SOUNDS.equip_0.play();\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGING')\n    this.draggedEntity = draggedEntity;\n  }\n\n  grab (pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile) return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (!this.draggedEntity && entity.entityTypes.includes('DRAGGABLE')) {\n        this.draggedEntity = entity;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  release () {\n    if (!this.draggedEntity) return false;\n    const draggedEntity = {...this.draggedEntity};\n    this.draggedEntity = null;\n    return draggedEntity;\n  }\n\n  drag (lastPos) {\n    // update entity position\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)]\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) }\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n\n  move (targetPos) {\n    const lastPos = {...this.pos}\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n}\n\nconst Draggable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE')\n  }\n}\n\nconst Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPREADING')\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n\n  getAction (game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR', 'DOOR'].includes(newTile.type)\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      \n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: {x: 0, y: 0},\n          game,\n          renderer: {\n            character: '*',\n            sprite: '',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        })\n\n        this.timeToSpread = this.timeToSpreadMax\n        this.spreadCount -= 1\n        \n        return new Action.PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        })\n      }\n      this.timeToSpread = this.timeToSpreadMax\n      this.spreadCount -= 1\n    }\n\n    this.timeToSpread -= 1;\n    \n    return new Action.Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    })\n  }\n}\n\n  const Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    let defense = this.defense;\n    // add in reducer to get defense stats of all equpiment\n    if (this.entityTypes.includes('EQUIPING')) {\n      this.equipment.forEach((slot) => {\n        if (slot.item) {\n          if (slot.item.entityTypes.includes('DESTRUCTABLE')) {\n            defense += slot.item.getDefense();\n          }\n        }\n      });\n    }\n    \n    return defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    this.renderer.character = this.durability;\n    this.game.draw()\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPEAKING')\n    this.messages = messages;\n    this.messageType = messageType\n  }\n\n  getAction (game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Action.Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n}\n\nconst Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('BURNABLE')\n    this.canBurn = true;\n    this.willResetCanBurn = false;\n  }\n\n  resetCanBurn () {\n    this.willResetCanBurn = false;\n    this.canBurn = true;\n  }\n\n  burn () {\n    if (this.canBurn) {\n      this.decreaseDurability(2)\n      return true;\n    }\n    return false;\n  }\n}\n\nconst Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EXPLODING')\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n\n  enflame () {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      })\n    })\n\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire)\n    })\n  }\n\n  explode () {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      }\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) tile.type = 'BURNT';\n    });\n\n    if (this.explosivity > 0) SOUNDS.explosion_0.play();\n\n    // this.game.draw(); //may not need draw here\n  }\n\n  destroy () {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n}\n\nconst Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HELPLESS');\n    this.saved = false;\n  }\n\n  save () {\n    this.saved = true;\n    SOUNDS.save.play();\n  }\n\n  destroy () {\n    const sound = Helper.getRandomInArray([SOUNDS.scream_0, SOUNDS.scream_1, SOUNDS.scream_2])\n    sound.play();\n    super.destroy();\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const Armor = pipe(\n  Rendering, \n  Equipable, \n  Destructable,\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const FireSpread = pipe (\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move', hidden = false) => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n      hidden,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n      hidden,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n      hidden,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n      hidden,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem, UnequipItemToTile } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      initiatedBy.setNextAction(new UnequipItemToTile({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst trigger = (engine, actor, radius = 1) => {\n  let cursor = engine.actors[engine.currentActor];\n\n  actor.setNextAction(\n    // new Action.Say({\n    //   game: engine.game,\n    //   actor,\n    //   message: 'I\\'ll crush you!',\n    //   energyCost: Constant.ENERGY_THRESHOLD\n    // })\n    new Action.SprayWater({\n      targetPos: { ...cursor.pos },\n      radius,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymap = (engine, initiatedBy, previousKeymap, radius) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n    // make sure actor is burnable once targeting is complete or canceled\n    initiatedBy['willResetCanBurn'] = true;\n    \n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(moveCursor, engine),\n    t: {\n      activate: () => {\n        // make sure actor is burnable once targeting is complete or canceled\n        initiatedBy['canBurn'] = true;\n        trigger(engine, initiatedBy, radius);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const activateProjectile = (engine, radius, range = 2) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n  // prevent player from being burned while on fire.\n  currentActor['canBurn'] = false;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    range,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymap(engine, currentActor, { ...currentActor.keymap }, radius),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import { Shove } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Attack }from '../../actions'\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD, THEMES } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap, animations) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => {\n    initiatedBy.keymap = previousKeymap;\n    // animation code\n    if (animations.length) {\n      animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n    }\n    // end\n  }\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    DIRECTIONS.N,\n    DIRECTIONS.E,\n    DIRECTIONS.S,\n    DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  })\n  // end\n\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap }, animations);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport { coordsToString } from '../../../helper';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor, animation) => {\n  const pos = {\n    x: actor.pos.x + direction[0],\n    y: actor.pos.y + direction[1],\n  };\n  actor.setNextAction(\n    new Action.GrabDirection({\n      targetPos: pos,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD,\n    })\n  )\n}\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap, animations) => {\n  return {\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n        // animation code\n        if (animations.length) {\n          animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n        }\n        // end\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    Constant.DIRECTIONS.N,\n    Constant.DIRECTIONS.E,\n    Constant.DIRECTIONS.S,\n    Constant.DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: Constant.THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  }) \n  // end\n\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap, animations);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      // this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    // this.game.updateMode();\n    this.game.mode.update();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\nimport uuid from 'uuid/v1';\nimport * as Helper from '../../helper';\n\nexport const ANIMATION_TYPES = {\n  DEFAULT: 0,\n  BLINK_TILE: 1,\n  SOLID_TILE: 2,\n}\n\nclass Animation {\n  constructor({display}) {\n    const id = uuid();\n    this.id = id;\n    this.lifeTime = 0;\n    this.active = true;\n    this.display = display;\n    this.node = null;\n  }\n\n  getActive () {\n    return false;\n  }\n\n  initialize () {\n    return;\n  }\n\n  update (frame) {\n    this.lifeTime += frame.timeDiff;\n    this.active = this.getActive();\n    if (!this.active) {\n      this.display.removeAnimation(this.id);\n    }\n  }\n}\n\nclass ExampleAnimation extends Animation {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  getActive () {\n    if (this.lifeTime > 500) {\n      return false;\n    }\n    return true;\n  }\n}\n\nclass BlinkTile extends Animation {\n  constructor({\n    x,\n    y,\n    lerpDirection = -1,\n    color = '#fff',\n    ...args\n  }) {\n    super({ ...args });\n    this.x = x;\n    this.y = y;\n    this.lerpDirection = lerpDirection;\n    this.color = color;\n  }\n\n  getActive () {\n    return this.active;\n  }\n\n  initialize () {\n    this.active = true;\n    let rect = new Konva.Rect({\n      name: 'rect',\n      x: (this.display.tileWidth * this.x) + (this.display.tileOffset + this.display.tileGutter),\n      y: (this.display.tileHeight * this.y) + (this.display.tileOffset + this.display.tileGutter),\n      offsetX: this.display.tileWidth / -4,\n      offsetY: this.display.tileHeight / -4,\n      width: this.display.tileWidth / 2,\n      height: this.display.tileHeight / 2,\n      fill: this.color,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n    this.display.animationLayer.add(rect);\n    this.node = rect;\n    super.initialize();\n  }\n\n  update (frame) {\n    let opacity = this.node.opacity();\n    if (opacity >= 1) this.lerpDirection = -1;\n    if (opacity <= 0) this.lerpDirection = 1;\n    opacity += (0.05 * this.lerpDirection)\n    this.node.opacity(Helper.clamp(opacity, 0, 1))\n    super.update(frame);\n  }\n  \n}\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n    cameraFollow = false,\n    game = null,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tilesWide = this.getTilesWide(width, tileOffset, tileWidth);\n    this.tilesHigh = this.getTilesHigh(height, tileOffset, tileHeight);\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.cameraFollow = cameraFollow;\n    this.stage = null;\n    this.layer = null;\n    this.animationLayer = null;\n    this.animations = [];\n    this.animationLoop = null;\n    this.game = game;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    // setting up main tile map layer\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n    \n    // setting up animation layer\n    this.animationLayer = new Konva.Layer({});\n    this.stage.add(this.animationLayer);\n    let animationLoop = new Konva.Animation((frame) => {\n      this.animations.forEach((animation) => animation.update(frame))\n      // Stop animation updates if no animations to process\n      if (this.animations.length <= 0) {\n        if (this.animationLoop) {\n          if (this.animationLoop.isRunning()) {\n            this.animationLoop.stop();\n          }\n        }\n      }\n    }, this.animationLayer);\n    this.animationLoop = animationLoop;\n    animationLoop.start();\n  }\n\n  addAnimation (type, args) {\n    let animation;\n    switch (type) {\n      case ANIMATION_TYPES.DEFAULT:\n        animation = new Animation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.SOLID_TILE:\n        animation = new ExampleAnimation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.BLINK_TILE:\n        animation = new BlinkTile({display: this, ...args})\n        break;\n      \n      default:\n        animation = new Animation({ display: this, ...args})\n        break;\n    }\n    animation.initialize();\n    this.animations.push(animation)\n    if (!this.animationLoop.isRunning()) this.animationLoop.start();\n    return animation\n  }\n\n  removeAnimation (id) {\n    this.animations = this.animations.filter((anim) => {\n      if (anim.id !== id) return true;\n      // if anim is being removed, remove associated nodes and shapes too\n      anim.node.destroy();\n      return false;\n    });\n    \n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 24,\n      fontFamily: 'scroll-o-script',\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  getAbsoultueX(x) {\n    return (this.tileWidth * x) + (this.tileOffset + this.tileGutter)\n  }\n\n  getAbsoultueY(y) {\n    return (this.tileWidth * y) + (this.tileOffset + this.tileGutter)\n  }\n\n  getTilesWide (width, tileOffset, tileWidth) {\n    return Math.floor((width - tileOffset) / tileWidth)\n  }\n  \n  getTilesHigh(height, tileOffset, tileHeight) {\n    return Math.floor((height - tileOffset) / tileHeight)\n  }\n\n  draw (playerPos) {\n    if (this.cameraFollow && playerPos) {\n      const tilesWide = this.tilesWide;\n      const tilesHigh = this.tilesHigh;\n      const tilesAcrossOnScreen = Math.floor(this.width / this.tileWidth)\n      const tilesDownOnScreen = Math.floor(this.height / this.tileHeight)\n      \n      const bufferX = Math.ceil(tilesWide - (tilesAcrossOnScreen / 2));\n      const bufferY = Math.ceil(tilesHigh - (tilesDownOnScreen / 2));\n      let newX = 0;\n      let newY = 0;\n      if (playerPos.x > tilesWide - bufferX) {\n        newX = tilesWide - bufferX - playerPos.x\n      }\n      if (playerPos.y > tilesHigh - bufferY) {\n        newY = tilesHigh - bufferY - playerPos.y;\n      }\n      this.layer.x(this.getAbsoultueX(newX))\n      this.layer.y(this.getAbsoultueY(newY))\n    }\n    this.layer.batchDraw();\n    // this.animationLayer.batchDraw();\n    // this.layer.draw();\n  }\n}","import * as Helper from '../../helper';\n\nexport const generate = (map, offsetX, offsetY, unitCount = 12, unitSize = 4, borderWidth = 1) => {\n  let data = {};\n  // const floorPlan = createFloorPlan(unitCount);\n  // let maxX = 0; \n  // let minX = 0; \n  // let maxY = 0; \n  // let minY = 0; \n  // floorPlan.forEach((pos) => {\n  //   if (pos.x > maxX) maxX = pos.x;\n  //   if (pos.x < minX) minX = pos.x;\n  //   if (pos.y > maxY) maxY = pos.y;\n  //   if (pos.y < minY) minY = pos.y;\n  // })\n  // const floorPlanWidth = Math.abs(maxX) + Math.abs(minX) + 1;\n  // const floorPlanHeight = Math.abs(maxY) + Math.abs(minY) + 1;\n  // console.log(floorPlanWidth);\n  // console.log(floorPlanHeight);\n  \n  let floorPlan = createFloorPlan();\n  let kill = 1000\n  while (floorPlan.length < unitCount + 1) {\n    \n    let unit = createRoomInFloorPlan(floorPlan);\n    if (unit) {\n      const unitPosition = getUnitPosition(unit, offsetX, offsetY, unitSize);\n      let didCreate = createUnit(map, unitPosition, unitSize, 0);\n      if (didCreate) floorPlan.push(unit);\n    }\n    \n    kill -= 1;\n    if (kill <= 0) break;\n  }\n  \n  removeInnerWalls(map)\n  addInnerWalls(map, floorPlan.length)\n  return data;\n}\n\nconst createFloorPlan = () => {\n  // create origin\n  let floorPlan = [{x: 0, y: 0}];\n  return floorPlan\n}\n\nconst createRoomInFloorPlan = (floorPlan) => {\n  // randomly choose previously created unit\n  // let origin = floorPlan[floorPlan.length - 1];\n  let origin = Helper.getRandomInArray(floorPlan);\n  // randomly choose neighboring point\n  let newUnit = getNeighboringUnit(origin);\n  let unitAlreadyExists = unitExists(newUnit, floorPlan)\n  let kill = 1000\n  while (unitAlreadyExists) {\n    origin = Helper.getRandomInArray(floorPlan.filter((pnt) => !Helper.coordsAreEqual(pnt, origin)));\n    newUnit = getNeighboringUnit(origin);\n    unitAlreadyExists = unitExists(newUnit, floorPlan)\n    kill -= 1;\n    if (kill <= 0) {\n      unitAlreadyExists = false;\n      newUnit = false;\n      break;\n    }\n  }\n  \n  return newUnit\n}\n\nconst getNeighboringUnit = (origin) => Helper.getRandomInArray(getNeighboringPoints(origin))\nconst unitExists = (newUnit, existingUnits) => existingUnits.filter((unit) => unit.x === newUnit.x && unit.y === newUnit.y).length > 0;\nconst getUnitPosition = (floorPlanPos, mapOffsetX, mapOffsetY, unitSize) => {\n  return {\n    x: floorPlanPos.x + mapOffsetX + (unitSize * floorPlanPos.x),\n    y: floorPlanPos.y + mapOffsetY + (unitSize * floorPlanPos.y),\n  }\n}\n\nconst getNeighboringPoints = (origin, eightWay = false) => {\n  let neighbors = [\n    {\n      x: origin.x,\n      y: origin.y + 1\n    },\n    {\n      x: origin.x + 1,\n      y: origin.y\n    },\n    {\n      x: origin.x,\n      y: origin.y - 1\n    },\n    {\n      x: origin.x - 1,\n      y: origin.y\n    },\n  ]\n\n  if (eightWay) {\n    neighbors = neighbors.concat([\n      {\n        x: origin.x + 1,\n        y: origin.y + 1\n      },\n      {\n        x: origin.x + 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y + 1\n      },\n    ])\n  }\n  return neighbors;\n}\n\nconst createUnit = (map, position, size, border) => {\n  // const length = size; // this will leave a border\n  // const length = size + 1; // this will close the gap\n  const length = size + 1 - border; // this will calculate using border\n\n  // prevent units from hitting map edge\n  let unitCollidesWithEdge = false;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length; j++) {\n      const newPosition = {\n        x: position.x + i,\n        y: position.y + j,\n      }\n      let tile = map[Helper.coordsToString(newPosition)];\n      if (!tile) unitCollidesWithEdge = true;\n    }\n  }\n\n  if (!unitCollidesWithEdge) {\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        const newPosition = {\n          x: position.x + i,\n          y: position.y + j,\n        }\n        let type = 'FLOOR';\n        if (i === 0 || i === (length - 1)) type = 'WALL';\n        if (j === 0 || j === (length - 1)) type = 'WALL';\n        let tile = map[Helper.coordsToString(newPosition)];\n        if (tile) tile.type = type;\n      }\n    }\n  }\n\n  return !unitCollidesWithEdge;\n}\n\nconst removeInnerWalls = (map) => {\n  let walls = Object.keys(map).filter((key) => {\n    return map[key].type === 'WALL';\n  })\n\n  let innerWalls = walls.filter((key) => {\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, true).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL', 'FLOOR'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    \n    if (neighbors.length === 8) {\n      return true;\n    }\n    return false;\n  })\n\n  innerWalls.forEach((key) => {\n    map[key].type = 'FLOOR';\n  })\n}\n\nconst addInnerWalls = (map, count = 2) => {\n  // Finding corners\n  let corners = Object.keys(map).filter((key) => {\n    const tile = map[key];\n    if (tile.type !== 'WALL') return false;\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['GROUND'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    if (neighbors.length === 2) return true;\n    return false\n  })\n\n  // building walls\n  let wallCount = 0;\n  while (wallCount < count) {\n  // while (wallCount < corners.length) {\n  // for (let i = 0; i < count; i++) {\n    const corner = Helper.getRandomInArray(corners);\n    const coordArray = corner.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const wallNeighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    const selectedWallPos = Helper.getRandomInArray(wallNeighbors)\n    if (!selectedWallPos) continue;\n    const direction = {\n      x: Math.sign(selectedWallPos.x - coords.x),\n      y: Math.sign(selectedWallPos.y - coords.y)\n    };\n\n    let kill = 100;\n    let build = true;\n    let currentPosition = {...coords}\n    let previousFloorPositions = [];\n    while (build) {\n      currentPosition.x += direction.x;\n      currentPosition.y += direction.y;\n      let tile = map[Helper.coordsToString(currentPosition)];\n      if (!tile) break;\n      // if (tile.type === 'WALL') continue;\n      if (tile.type === 'FLOOR') {\n        tile.type = 'WALL';\n        previousFloorPositions.push({...currentPosition})\n        // console.log(previousFloorPositions.length);\n        \n      } else if (tile.type === 'GROUND' || (tile.type === 'WALL' && previousFloorPositions.length)) {\n        // go back two and make FLOOR\n        let prevPos = {\n          x: currentPosition.x - (direction.x * 2),\n          y: currentPosition.y - (direction.y * 2),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        // go back one more and make FLOOR\n        prevPos = {\n          x: currentPosition.x - (direction.x * 3),\n          y: currentPosition.y - (direction.y * 3),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        if (previousFloorPositions.length <= 0) {\n          //   // we need to create another wall, this one is bust\n          if (count <= 100) count += 1\n        }\n        break;\n      }\n      kill -= 1;\n      if (kill <= 0) build = false;\n    }\n    wallCount += 1;\n  }\n}","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport * as Item from '../items';\nimport * as MapHelper from '../Maps/helper';\nimport { generate as generateBuilding } from '../Maps/generator';\nimport { FireSpread, Speaker, Debris } from '../entites';\nimport { MESSAGE_TYPE } from '../message';\nimport { Mode } from './default';\nimport SOUNDS from '../sounds';\n\nexport class Play extends Mode {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  initialize () {\n    super.initialize();\n    const offsetX = Math.floor(this.game.mapWidth / 2)\n    const offsetY = Math.floor(this.game.mapHeight / 2)\n    generateBuilding(this.game.map, offsetX, offsetY);\n    MapHelper.addTileZone(\n      { x: 0, y: 0 },\n      3,\n      'SAFE',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    this.placeInitialItems();\n    this.placePlayersInSafeZone();\n\n    let array = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'FLOOR')\n    for (let index = 0; index < this.data.debrisCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.gasCanCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'gas can', 'X', 1, 3, Constant.THEMES.SOLARIZED.orange);\n    }\n    for (let index = 0; index < this.data.fireIntensity; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addFire({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.npcCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addNPC({ x: posXY[0], y: posXY[1] });\n    }\n    // sounds\n    if (!SOUNDS.fire_1.playing()) SOUNDS.fire_1.play();    \n  }\n\n  checkRemoveSafeFloors () {\n    const currentActor = this.game.engine.actors[this.game.engine.currentActor];\n    if (currentActor.name !== Constant.PLAYER_NAME) return;\n\n    this.data.turnCount += 1;\n    if (this.data.turnCount > this.getSaveCountRequirement() * 50) {\n      Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE_FLOOR').forEach((key) => {\n        this.game.map[key].type = 'FLOOR';\n      });\n\n    }\n  }\n\n  update () {\n    super.update();\n    this.propogateFire();\n    this.burnEntities();\n    this.checkRemoveSafeFloors();\n    if (this.hasLost()) {\n      this.reset();\n      this.game.initializeGameData();\n    }\n    // triggerd once all npcs are saved\n    if (this.hasWon()) {\n      this.nextLevel();\n      this.increaseIntensity()\n      this.game.initializeGameData();\n    }\n  }\n  \n  //Extras\n\n  setLevel (level) {\n    this.data.level = level;\n    this.data.turnCount = 0;\n  }\n\n  nextLevel () {\n    this.setLevel(this.data.level + 1);\n  }\n\n  reset () {\n    this.resetIntensity();\n    this.setLevel(1);\n    this.initialize();\n  }\n\n  increaseIntensity () {\n    switch (this.data.level) {\n      case 1:\n        this.data.fireIntensity = 1;\n        this.data.npcCount = 1;\n        this.data.debrisCount = 4;\n        this.data.gasCanCount = 0;\n        break;\n      case 2:\n        this.data.fireIntensity = 2;\n        this.data.npcCount = 1;\n        this.data.debrisCount = 4;\n        this.data.gasCanCount = 1;\n        break;\n      case 3:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 50;\n        this.data.gasCanCount = 1;\n        break;\n      case 4:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 6;\n        this.data.gasCanCount = 3;\n        break;\n      case 5:\n        this.data.fireIntensity = 5;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 6;\n        this.data.gasCanCount = 3;\n        break;\n      case 6:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 10;\n        this.data.gasCanCount = 3;\n        break;\n      case 7:\n        this.data.fireIntensity = 1;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 80;\n        this.data.gasCanCount = 25;\n        break;\n      case 8:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.gasCanCount = 6;\n        break;\n      default:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.gasCanCount = 5;\n        break;\n    }\n  }\n\n  resetIntensity () {\n    this.data.fireIntensity = 1;\n    this.data.npcCount = 1;\n    this.data.debrisCount = 4;\n  }\n\n  countNpcSafe () {\n    const helpless = this.game.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.game.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          if (!actor.saved) actor.save();\n          return true;\n        }\n      }\n      return false\n    });\n\n    return helpless.length;\n  }\n\n  getSaveCountRequirement () {\n    const minimum = Math.ceil(this.data.npcCount * 0.66);\n    return Math.max(1, minimum);\n  }\n\n  hasWon () {\n    return this.countNpcSafe() >= this.getSaveCountRequirement();\n  }\n\n  hasLost () {\n    const helpless = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.getSaveCountRequirement()) {\n      SOUNDS.lose.play();\n      this.game.toLose();\n      return true;\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 5, explosivity = 0, background = Constant.THEMES.SOLARIZED.base01) {\n    let sprite = Helper.getRandomInArray(['', '', '', '', '', '']);\n    if (explosivity > 0) sprite = ''\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        sprite,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background,\n      },\n      name,\n      game: this.game,\n      durability,\n      explosivity,\n      flammability: 0,\n    })\n\n    this.game.placeActorOnMap(box)\n    this.game.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: Constant.NPC_NAME,\n      // messages: SOLANGE.lyrics,\n      messages: ['help!', 'ahh!', 'It\\'s getting hot in hurr.'],\n      messageType: MESSAGE_TYPE.ACTION,\n      pos,\n      game: this.game,\n      renderer: {\n        character: 'C',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.game.placeActorOnMap(entity)) {\n      const tile = this.game.map[Helper.coordsToString(entity.pos)];\n      tile.type = 'SAFE_FLOOR';\n      this.game.engine.addActor(entity);\n      this.game.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this.game,\n      renderer: {\n        character: '*',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 2,\n      speed: 100,\n    })\n\n    if (this.game.placeActorOnMap(fire)) {\n      this.game.engine.addActor(fire);\n      this.game.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.game.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.game.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.game.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n        if (ent.willResetCanBurn) ent.resetCanBurn();\n      }\n    })\n  }\n\n  placeInitialItems () {\n    let objects = [\n      Item.axe(this.game.engine),\n      Item.waterGun(this.game.engine),\n      Item.fireJacket(this.game.engine),\n    ];\n\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n\n    objects.forEach((item) => {\n      const key = keys.pop();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        item.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(item);\n        }\n      }\n    })\n  }\n\n  placePlayersInSafeZone () {\n    let players = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n    players.forEach((player) => {\n      const key = keys.shift();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        player.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(player);\n        }\n      }\n    })\n  }\n\n}\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\n\nexport const addTileZone = (origin = { x: 0, y: 0 }, size = 3, type = 'GROUND', map, mapHeight, mapWidth) => {\n  for (let i = 0; i < mapHeight; i++) {\n    for (let j = 0; j < mapWidth; j++) {\n      if (i >= origin.y && i <= origin.y + (size - 1) && j >= origin.x && j <= origin.x + (size - 1)) {\n        const key = `${j},${i}`\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n}","import uuid from 'uuid/v1';\n\nexport class Mode {\n  constructor({\n    game = null,\n    data = {},\n  }) {\n    let id = uuid();\n    this.id = id;\n    this.game = game;\n    this.data = data;\n  }\n\n  initialize() {}\n\n  update() {}\n\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport * as Mode from './Modes/index';\n\n// const MAP_DATA = require('./Maps/building.json');\n// const MAP_DATA = require('./Maps/building_w_floor.json');\n// const MAP_DATA = require('./Maps/building_w_ambo.json');\n// const SOLANGE = require('./Data/solange.json');\n\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 5;\nconst canvasWidth = (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET;\nconst canvasHeight = (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    getSelectedCharacter = () => false,\n    display = new Display({\n      containerId: 'display',\n      width: canvasWidth,\n      height: canvasHeight,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n      cameraFollow: false,\n      game: this,\n    }),\n    spriteMode = true,\n    tileKey = Constant.TILE_KEY,\n    mode = new Mode.Play({\n      game: this,\n      data: {\n        level: 1,\n        highestLevel: null,\n        fireIntensity: 1, // increase this number to increase fire spread\n        npcCount: 1,\n        debrisCount: 4,\n        gasCanCount: 0,\n        turnCount: 0,\n      },\n    }),\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.spriteMode = spriteMode;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    this.mode.initialize();\n  }\n  \n  updateMode () { // this is run every game turn\n    this.mode.update();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createEmptyLevel () {\n    for (let i = 0; i < this.mapHeight; i ++) {\n      for (let j = 0; j < this.mapWidth; j ++) {\n        const key = `${j},${i}`\n        let type = 'GROUND';\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        this.map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = JSON.parse(tile.data);\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n    \n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n\n    this.placeInitialEntities();\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      // let { foreground, background } = this.tileKey[tile.type]\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      let character = nextFrame.character;\n      let foreground = nextFrame.foreground;\n      let background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n\n  getPlayers () {\n    return this.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n\n    let playerPos = null;\n    const players = this.getPlayers();\n    if (players.length) { playerPos = players[0].pos }\n\n    this.display.draw(playerPos);\n  }\n\n  getEntityRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite, foreground: renderer.color}\n      // return {character: renderer.sprite, foreground: renderer.background, background: ''}\n    }\n    // else us the ascii character\n    return {...renderer, foreground: renderer.color}\n  }\n\n  getTileRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite}\n    }\n    // else us the ascii character\n    return renderer\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let { character, foreground, background } = this.getEntityRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getEntityRenderer(renderer.animation[entity.currentFrame]);\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = this.getTileRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getTileRenderer(renderer.animation[tile.currentFrame]);\n      character = frame.character\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.createEmptyLevel();\n    // this.createLevel();\n    // this.createCustomLevel(MAP_DATA);\n    this.initializeMap();\n    this.draw();\n    // this.randomlyPlaceAllActorsOnMap()\n    // this.placeActorsOnMap()\n    // this.initializeMode();\n    this.mode.initialize();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n    // hack to register sprite mode\n    setTimeout(() => {\n      this.spriteMode = false;\n      this.draw()\n    }, 100)\n    setTimeout(() => {\n      this.spriteMode = true;\n      this.draw()\n    }, 100)\n    // end hack\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nclass Instructions extends React.Component {\n  render() {\n    let modeDetails = null;\n    try {\n      modeDetails = (\n        <span>\n          <div className='Instructions__block'>{`Wave ${this.props.game.mode.data.level}`}</div>\n          <div className='Instructions__block'>\n            {\n              `${this.props.game.mode.countNpcSafe()} of  ${this.props.game.mode.getSaveCountRequirement()} are safe!`\n            }\n          </div>\n        </span>\n      );\n    } catch { return }\n\n    return (\n      <div className=\"Instructions UI\">\n        <p className='flow-text'>\n          Save all of the citizens from the burning keep and get them to the safe zone!\n        </p>\n        <div className='flow-text'>\n          { modeDetails }\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}\n          >\n            {/* <button className='btn btn-main' onClick={() => window.location.reload()}>\n              Restart\n            </button> */}\n            {/* <button className='btn btn-main' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>\n              Restart\n            </button> */}\n            <button className='btn btn-main'>\n              Restart\n            </button>\n          </div>\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.toggleSpriteMode()}\n          >\n            <button className='btn btn-main'>\n              {\n                this.props.spriteMode ? (\n                  'ASCII mode'\n                ) : (\n                  'Sprite mode'\n                )\n              }\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              const hidden = value.hasOwnProperty('hidden') ? value.hidden : false;\n              if (!hidden) {\n                return (\n                  <Button key={index} onClick={() => null} color='grey darken-1'>\n                    {key} {value.label}\n                  </Button>\n                )\n              }\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Instructions from '../UI/Instructions';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ engine: ENGINE, getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE)})\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n      spriteMode: game.spriteMode,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game['toLose'] = () => this.props.setActiveScreen(SCREENS.LOSE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  toggleSpriteMode () {\n    this.state.game.spriteMode = !this.state.game.spriteMode;\n    this.state.game.draw();\n    this.presserRef.current.focus();\n    this.setState({ spriteMode: this.state.game.spriteMode})\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <Instructions game={this.state.game} spriteMode={this.state.game.spriteMode} setActiveScreen={this.props.setActiveScreen} toggleSpriteMode={this.toggleSpriteMode.bind(this)} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n            <Messages messages={this.state.game.messages.slice(-5).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              Play Game\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport { SCREENS } from './constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              You Lost. Try Again?\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Lose extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#222',\n            // backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Lose;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine, 'push', true),\n      t: {\n        activate: () => Keymap.activateProjectile(engine, 1, 5),\n        label: 'shoot water',\n      },\n      c: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n      e: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'equipment',\n      },\n      p: {\n        activate: () => Keymap.equipRandomFromTile(engine),\n        label: 'pick up',\n      },\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      sprite: '',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: Constant.PLAYER_NAME,\n    equipment: Constant.EQUIPMENT_LAYOUTS.limited(),\n    actions: [],\n    speed: 100,\n    durability: 4,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  // const axe = Array(2).fill('').map(() => Item.axe(engine));\n  // actor.container = [\n  //   new Entity.ContainerSlot({\n  //     itemType: axe[0].name,\n  //     items: axe,\n  //   }),\n  // ]\n  return actor;\n}","import { PickupItem, EquipItemFromTile } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\nimport { MESSAGE_TYPE } from '../../message';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};\n\nexport const equipRandomFromTile = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new EquipItemFromTile({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    engine.game.addMessage(`nothing to equip.`, MESSAGE_TYPE.ACTION);\n  }\n};","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    // RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Lose from './Screen/Lose';\nimport Characters from './Characters/index';\nimport SOUNDS from './sounds';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    if (activeScreen === SCREENS.TITLE) {\n      Object.keys(SOUNDS).forEach(key => {\n        SOUNDS[key].stop();\n      });\n    }\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const loseScreen = <Lose \n      key={SCREENS.LOSE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LOSE:\n        return loseScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}