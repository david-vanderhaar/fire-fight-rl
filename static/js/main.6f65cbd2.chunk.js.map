{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/items.js","nystrum/actions.js","nystrum/entites.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateProjectile.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/push.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/game.js","nystrum/UI/Instructions.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/FireFighter.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","getRandomInt","min","max","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","tile","tileKey","type","passable","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","GENERIC","EQUIPMENT_LAYOUTS","human","name","item","limited","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","water","PARTICLE_TYPE","directional","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","ERROR","Message","uuid","this","TYPE","waterGun","Entity","attackDamage","equipmentType","Constant","fireJacket","defense","Base","actor","energyCost","processDelay","particles","particleTemplate","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","messageType","args","addMessage","SprayWater","hasItemNameEquipped","ITEM_TYPES","structure","Array","fill","reduce","acc","curr","concat","slot","forEach","position","addParticle","sign","EquipItemFromTile","getItemInSlot","equip","it","UnequipItemToTile","unequip","splice","DestroySelf","destroy","CursorMove","initiatedFrom","initiatedBy","cursorCanOccupyPosition","PlaceActor","forcePlacement","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","GrabDirection","grab","ReleaseGrab","release","Attack","entityTypes","includes","attack","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Parent","superclass","children","Engine","isInitialized","child","actors","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","additional","targets","target","getAttackDamage","equipment","decreaseDurability","Equipable","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","Playing","keymap","nextAction","Chasing","targetEntity","Draggable","Destructable","durability","onDestroy","getDefense","current","newDurability","Burnable","UI_Actor","pipe","Speaker","messages","Debris","flammability","explosivity","FireSpread","timeToSpread","spreadCount","fire","enflame","explode","Player","getProjectile","pathToCheck","inPath","throwDirection","projectile","createPath","targetInPath","movePath","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","itemName","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","Armor","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","canBurn","step","nextPos","getNextPos","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","hidden","w","activate","d","s","a","activateEquipment","visibleEquipment","ui","addActorAsPrevious","Escape","setNextAction","keymapEquipment","moveCursor","newX","newY","previousKeymap","goToPreviousKeymap","cursor","t","trigger","randomlyPlaceActorOnMap","chop","keyMapChop","keymapCursorToGrabEntity","initialKeymap","grabDirection","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","Display","containerId","width","height","tileWidth","tileHeight","tileGutter","tileOffset","stage","layer","document","getElementById","displayContainer","createElement","appendChild","Konva","Stage","Layer","hitGraphEnabled","add","node","Group","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","rect","Rect","strokeEnabled","Text","fontSize","align","verticalAlign","batchDraw","MAP_DATA","require","GAME_MODE_TYPES","WAVE","TEST","PLAY","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","Game","mapInitialized","tileMap","mapWidth","mapHeight","getSelectedCharacter","display","mode","data","level","highestLevel","fireIntensity","npcCount","debrisCount","localStorage","getItem","setItem","addWaveEnemy","posXY","coord","addDebris","addFire","addNPC","nextModeLevel","initializeMode","propogateFire","burnEntities","hasLost","hasWon","increaseIntensity","initializeGameData","setModeLevel","resetIntensity","allSaved","players","box","ent","burn","placed","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","JSON","parse","placeInitialObjects","objectsToPlace","Item","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","frame","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","createCustomLevel","initializeMap","initializeUI","handleKeyPress","event","code","Instructions","className","props","countNpcSafe","onClick","setActiveScreen","React","Component","Button","Keymap","entries","style","borderColor","Messages","Level","ENGINE","state","activeTab","createRef","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","top","setSelectedCharacter","Title","backgroundImage","backgroundRepeat","backgroundPosition","backgroundPositionY","p","g","f","Characters","FireFighter","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","bg","naruto","reciever","responded","RECIEVE","sender","Components","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f65cbd2.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    const tile = map[x + \",\" + y];\n    if (tile) {\n      return (game.tileKey[tile.type].passable);\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n    ]\n  },\n  'WET': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.blue,\n    character: '=',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base0, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '=', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '~', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    passable: false,\n  },\n\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n  GENERIC: 'GENERIC',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  },\n  limited: () => {\n    return [\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_1', item: null},\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_2', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n  water: {\n    renderer: {\n      character: '~',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.blue,\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n  ERROR: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.yellow,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Entity from './entites';\nimport * as Constant from './constants';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  ARMOR: 'Armor',\n  WATER_GUN: 'Water Gun',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const axe = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'a',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const waterGun = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.WATER_GUN,\n  passable: true,\n  attackDamage: 0,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'w',\n    color: Constant.THEMES.SOLARIZED.blue,\n    background: '',\n  },\n})\n\nexport const fireJacket = (engine) => new Entity.Armor({\n  game: engine.game,\n  name: 'Fire Jacket',\n  passable: true,\n  defense: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'J',\n    color: Constant.THEMES.SOLARIZED.magenta,\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\nimport { TYPE as ITEM_TYPES } from './items';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.messageType = messageType\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SprayWater extends Base {\n  constructor({ targetPos, radius = 1, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.radius = radius\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.water\n  }\n  perform() {\n\n    if (!this.actor.hasItemNameEquipped(ITEM_TYPES.WATER_GUN)) {\n      this.game.addMessage(`${this.actor.name} doesn't have a ${ITEM_TYPES.WATER_GUN}.`, MESSAGE_TYPE.ERROR);\n      return {\n        success: false,\n        alternative: null,\n      }\n    }\n\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.radius).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    const positions = structure.positions.map((slot) => {\n      return {\n        x: this.targetPos.x + slot.x + structure.x_offset,\n        y: this.targetPos.y + slot.y + structure.y_offset\n      }\n    }).concat({...this.targetPos});\n\n    positions.forEach((position) => {\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) { \n        if (tile.type === 'BURNT') tile.type = 'GROUND';\n        if (tile.type === 'FLOOR') tile.type = 'WET';\n      }\n    });\n\n    // adding particles\n    positions.forEach((pos) => {\n      this.addParticle(\n        3,\n        { ...pos },\n        {\n          x: Math.sign(pos.x - this.targetPos.x),\n          y: Math.sign(pos.y - this.targetPos.y)\n        },\n      )\n    })\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      // if (itemInSlot) {\n      //   this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      // }\n      if (itemInSlot) {\n        this.game.addMessage(`${this.actor.name}\\'s equipment slots are full.`, MESSAGE_TYPE.ERROR);\n      } else {\n        this.actor.equip(this.item.equipmentType, this.item);\n        let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n        this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n        success = true;\n        this.actor.energy -= this.energyCost;\n      }\n\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class UnequipItemToTile extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.splice(0, 0, this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    const initiatedFrom = this.actor.initiatedBy.pos; \n    const path = Helper.calculatePath(this.game, this.targetPos, initiatedFrom, 8);\n    const isInRange = this.actor.range ? path.length <= this.actor.range : true;\n\n    if (isInRange && this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n    this.interrupt = interrupt\n    this.forcePlacement = forcePlacement\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.release()) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    };\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless'}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, range = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n    this.range = range;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  hasItemNameEquipped (itemName) {\n    const equipment = this.equipment.filter((slot) => {\n      if (slot.item) {\n        if (slot.item.name === itemName) {\n          return true;\n        }\n      }\n      return false;\n    })\n\n    return equipment.length > 0;\n\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n    return foundSlot;\n  }\n  \n  unequip (item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGING')\n    this.draggedEntity = draggedEntity;\n  }\n\n  grab (pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile) return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (!this.draggedEntity && entity.entityTypes.includes('DRAGGABLE')) {\n        this.draggedEntity = entity;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  release () {\n    if (!this.draggedEntity) return false;\n    this.draggedEntity = null;\n    return true;\n  }\n\n  drag (lastPos) {\n    // update entity position\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)]\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) }\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n\n  move (targetPos) {\n    const lastPos = {...this.pos}\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n}\n\nconst Draggable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE')\n  }\n}\n\nconst Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPREADING')\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n\n  getAction (game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR'].includes(newTile.type)\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      \n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: {x: 0, y: 0},\n          game,\n          renderer: {\n            character: '*',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        })\n\n        this.timeToSpread = this.timeToSpreadMax\n        this.spreadCount -= 1\n        \n        return new Action.PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        })\n      }\n      this.timeToSpread = this.timeToSpreadMax\n      this.spreadCount -= 1\n    }\n\n    this.timeToSpread -= 1;\n    \n    return new Action.Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    })\n  }\n}\n\n  const Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    let defense = this.defense;\n    // add in reducer to get defense stats of all equpiment\n    if (this.entityTypes.includes('EQUIPING')) {\n      this.equipment.forEach((slot) => {\n        if (slot.item) {\n          if (slot.item.entityTypes.includes('DESTRUCTABLE')) {\n            defense += slot.item.getDefense();\n          }\n        }\n      });\n    }\n    \n    return defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    this.renderer.character = this.durability;\n    this.game.draw()\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPEAKING')\n    this.messages = messages;\n    this.messageType = messageType\n  }\n\n  getAction (game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Action.Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n}\n\nconst Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('BURNABLE')\n  }\n\n  burn () {\n    this.decreaseDurability(2)\n    return true;\n  }\n}\n\nconst Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EXPLODING')\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n\n  enflame () {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      })\n    })\n\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire)\n    })\n  }\n\n  explode () {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      }\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) tile.type = 'BURNT';\n    });\n\n    // this.game.draw(); //may not need draw here\n  }\n\n  destroy () {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n}\n\nconst Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HELPLESS')\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const Armor = pipe(\n  Rendering, \n  Equipable, \n  Destructable,\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const FireSpread = pipe (\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move', hidden = false) => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n      hidden,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n      hidden,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n      hidden,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n      hidden,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem, UnequipItemToTile } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItemToTile({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst trigger = (engine, actor, radius = 1) => {\n  let cursor = engine.actors[engine.currentActor];\n\n  actor.setNextAction(\n    // new Action.Say({\n    //   game: engine.game,\n    //   actor,\n    //   message: 'I\\'ll crush you!',\n    //   energyCost: Constant.ENERGY_THRESHOLD\n    // })\n    new Action.SprayWater({\n      targetPos: { ...cursor.pos },\n      radius,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymap = (engine, initiatedBy, previousKeymap, radius) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(moveCursor, engine),\n    t: {\n      activate: () => {\n        trigger(engine, initiatedBy, radius);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const activateProjectile = (engine, radius, range = 2) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    range,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymap(engine, currentActor, { ...currentActor.keymap }, radius),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Bandit, RangedBandit, FireSpread } from '../../entites';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n}\n\nexport const addActor = (game) => {\n  // let targetEntity = game.engine.actors[game.engine.currentActor]\n  // let pos = Helper.getRandomPos(game.map).coordinates\n  // const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  // let actor = new banditStats.entityClass({\n  //   targetEntity,\n  //   pos,\n  //   renderer: banditStats.renderer,\n  //   name: banditStats.name,\n  //   game,\n  //   actions: [],\n  //   attackDamage: banditStats.attackDamage,\n  //   durability: banditStats.durability,\n  //   speed: banditStats.speed,\n  //   // directional projectile destruction breaks engine\n  //   getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n  //   // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  // })\n  let actor = new FireSpread({\n    name: 'Pyro',\n    game,\n    renderer: {\n      character: '*',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.red,\n    },\n    timeToSpread: 1,\n    spreadCount: 1,\n    durability: 1,\n    attackDamage: 1,\n    speed: 100,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { Shove } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Attack }from '../../actions'\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop Action',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap });\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor) => {\n  actor.setNextAction(\n    new Action.GrabDirection({\n      targetPos: { \n        x: actor.pos.x + direction[0],\n        y: actor.pos.y + direction[1],\n      },\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 18,\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  draw () {\n    this.layer.batchDraw();\n    // this.layer.draw();\n  }\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\nimport * as Item from './items';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport { FireSpread, Speaker, Debris } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\n// const MAP_DATA = require('./Maps/building.json');\n// const MAP_DATA = require('./Maps/building_w_floor.json');\nconst MAP_DATA = require('./Maps/building_w_ambo.json');\nconst SOLANGE = require('./Data/solange.json');\n\nconst GAME_MODE_TYPES = {\n  WAVE: 0,\n  TEST: 1,\n  PLAY: 2,\n};\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 5;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    getSelectedCharacter = () => false,\n    display = new Display({\n      containerId: 'display',\n      width: (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET,\n      height: (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.PLAY,\n      data: {\n        level: 1,\n        highestLevel: null,\n        fireIntensity: 1, // increase this number to increase fire spread\n        npcCount: 1,\n        debrisCount: 4,\n      }\n    },\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    } \n    \n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      let array = Object.keys(this.map).filter((key) => this.map[key].type === 'FLOOR')\n      for (let index = 0; index < this.mode.data.debrisCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addDebris({ x: posXY[0], y: posXY[1] });\n      }\n      for (let index = 0; index < this.mode.data.fireIntensity; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addFire({x: posXY[0], y: posXY[1]});\n      }\n      for (let index = 0; index < this.mode.data.npcCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addNPC({x: posXY[0], y: posXY[1]});\n      }\n        \n    }\n  }\n  \n  updateMode () { // this is run every game turn\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n\n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      this.propogateFire();\n      this.burnEntities();\n\n      if (this.hasLost()) {\n        return;\n        // this.resetMode();\n        // this.initializeGameData();\n      }\n      // triggerd once all npcs are saved\n      if (this.hasWon()) { \n        this.nextModeLevel();\n        this.increaseIntensity()\n        this.initializeGameData();\n      }\n    }\n\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      this.resetIntensity();\n    }\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  // Fire Fight Specific\n\n  increaseIntensity () {\n\n    switch (this.mode.data.level){\n      case 1:\n        this.mode.data.fireIntensity = 1;\n        this.mode.data.npcCount = 1;\n        this.mode.data.debrisCount = 4;\n        break;\n      case 2:\n        this.mode.data.fireIntensity = 2;\n        this.mode.data.npcCount = 1;\n        this.mode.data.debrisCount = 4;\n        break;\n      case 3:\n        this.mode.data.fireIntensity = 3;\n        this.mode.data.npcCount = 2;\n        this.mode.data.debrisCount = 6;\n        break;\n      case 4:\n        this.mode.data.fireIntensity = 4;\n        this.mode.data.npcCount = 3;\n        this.mode.data.debrisCount = 6;\n        break;\n      case 5:\n        this.mode.data.fireIntensity = 5;\n        this.mode.data.npcCount = 3;\n        this.mode.data.debrisCount = 6;\n        break;\n      case 6:\n        this.mode.data.fireIntensity = 4;\n        this.mode.data.npcCount = 3;\n        this.mode.data.debrisCount = 10;\n        break;\n      default:\n        this.mode.data.fireIntensity = 4;\n        this.mode.data.npcCount = 3;\n        this.mode.data.debrisCount = 10;\n        break;\n    }\n  }\n\n  resetIntensity () {\n    this.mode.data.fireIntensity = 1;\n    this.mode.data.npcCount = 1;\n    this.mode.data.debrisCount = 4;\n  }\n\n  countNpcSafe () {\n    const helpless = this.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          return true;\n        }\n      }\n      return false\n    });\n    return helpless.length;\n  }\n\n  hasWon () {\n    let allSaved = true;\n    const helpless = this.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n\n    helpless.forEach((actor) => {\n      const tile = this.map[Helper.coordsToString(actor.pos)];\n      if (tile.type !== 'SAFE') {\n        allSaved = false;\n      }\n    })\n\n    return allSaved;\n  }\n\n  hasLost () {\n    const helpless = this.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.mode.data.npcCount) {\n      const players = this.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'));\n      if (players.length) players[0].destroy();\n      return true\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 1) {\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background: Constant.THEMES.SOLARIZED.base01,\n      },\n      name,\n      game: this,\n      durability,\n    })\n\n    this.placeActorOnMap(box)\n    this.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: 'Tobi Lou',\n      // messages: SOLANGE.lyrics,\n      messages: ['help!', 'ahh!', 'It\\'s getting hot in hurr.'],\n      messageType: MESSAGE_TYPE.STATUS_EFFECT,\n      pos,\n      game: this,\n      renderer: {\n        character: 'T',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.placeActorOnMap(entity)) {\n      this.engine.addActor(entity);\n      this.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this,\n      renderer: {\n        character: '*',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 2,\n      speed: 100,\n    })\n\n    if (this.placeActorOnMap(fire)) {\n      this.engine.addActor(fire);\n      this.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.mode.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.map).filter((key) => this.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.map).filter((key) => this.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n      }\n    })\n  }\n\n  // End\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = JSON.parse(tile.data);\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n    \n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n\n    this.placeInitialObjects();\n  }\n\n  placeInitialObjects () {\n    const objectsToPlace = {\n      '18,20': Item.axe(this.engine),\n      '19,20': Item.waterGun(this.engine),\n      '20,20': Item.fireJacket(this.engine),\n    }\n\n    Object.keys(objectsToPlace).forEach((key) => {\n      let tile = this.map[key];\n      if (tile) {\n        tile.entities.push(objectsToPlace[key]);\n      }\n    })\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n    this.display.draw();\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    // this.createLevel();\n    this.createCustomLevel(MAP_DATA);\n    this.initializeMap();\n    this.draw();\n    // this.randomlyPlaceAllActorsOnMap()\n    this.placeActorsOnMap()\n    this.initializeMode();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"Instructions UI\">\n        <p className='flow-text'>\n          Save all of the citizens from the burning building and get them to the safe zone!\n        </p>\n        <div className='flow-text'>\n          <div className='Instructions__block'>{`Wave ${this.props.game.mode.data.level}`}</div>\n          <div className='Instructions__block'>{`${this.props.game.countNpcSafe()} of ${this.props.game.mode.data.npcCount} are safe!`}</div>\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}\n          >\n            <button className='btn btn-main' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>\n              Restart\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              const hidden = value.hasOwnProperty('hidden') ? value.hidden : false;\n              if (!hidden) {\n                return (\n                  <Button key={index} onClick={() => null} color='grey darken-1'>\n                    {key} {value.label}\n                  </Button>\n                )\n              }\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Instructions from '../UI/Instructions';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ engine: ENGINE, getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE)})\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <Instructions game={this.state.game} setActiveScreen={this.props.setActiveScreen} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n            <Messages messages={this.state.game.messages.slice(-5).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              Play Game\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine, 'push', true),\n      t: {\n        activate: () => Keymap.activateProjectile(engine, 1, 5),\n        label: 'shoot water',\n      },\n      e: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'equipment',\n      },\n      p: {\n        activate: () => Keymap.equipRandomFromTile(engine),\n        label: 'pick up',\n      },\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n      f: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: 'Fire Fighter',\n    equipment: Constant.EQUIPMENT_LAYOUTS.limited(),\n    actions: [],\n    speed: 100,\n    durability: 4,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  // const axe = Array(2).fill('').map(() => Item.axe(engine));\n  // actor.container = [\n  //   new Entity.ContainerSlot({\n  //     itemType: axe[0].name,\n  //     items: axe,\n  //   }),\n  // ]\n  return actor;\n}","import { PickupItem, EquipItemFromTile } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\nimport { MESSAGE_TYPE } from '../../message';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};\n\nexport const equipRandomFromTile = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new EquipItemFromTile({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    engine.game.addMessage(`nothing to equip.`, MESSAGE_TYPE.ACTION);\n  }\n};","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    // RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}