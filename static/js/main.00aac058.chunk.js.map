{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/push.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/FireFighter.js","nystrum/Keymap/KeyActions/addDebris.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","getRandomInt","min","max","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","passable","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","PARTICLE_TYPE","directional","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","Message","uuid","this","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","messageType","args","addMessage","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","DestroySelf","destroy","PlaceActor","forcePlacement","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","GrabDirection","grab","ReleaseGrab","release","Attack","entityTypes","includes","attack","addParticle","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","concat","isInitialized","child","actors","forEach","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","it","splice","Playing","keymap","nextAction","Chasing","targetEntity","Draggable","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","Burnable","UI_Actor","pipe","initiatedBy","Speaker","messages","Debris","flammability","explosivity","Array","fill","FireSpread","timeToSpread","spreadCount","fire","structure","reduce","acc","curr","position","enflame","explode","Player","getProjectile","pathToCheck","inPath","throwDirection","sign","projectile","createPath","targetInPath","movePath","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","canBurn","step","nextPos","getNextPos","TYPE","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","w","activate","d","s","a","activateInventory","visibleInventory","ui","addActorAsPrevious","Escape","setNextAction","keymapEquipFromInventory","randomlyPlaceActorOnMap","newX","newY","chop","previousKeymap","goToPreviousKeymap","keyMapChop","keymapCursorToGrabEntity","initialKeymap","grabDirection","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","Display","containerId","width","height","tileWidth","tileHeight","tileGutter","tileOffset","stage","layer","document","getElementById","displayContainer","createElement","appendChild","Konva","Stage","Layer","hitGraphEnabled","add","node","Group","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","rect","Rect","strokeEnabled","Text","fontSize","align","verticalAlign","batchDraw","MAP_DATA","require","SOLANGE","GAME_MODE_TYPES","WAVE","TEST","PLAY","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","Game","mapInitialized","tileMap","mapWidth","mapHeight","getSelectedCharacter","display","tileKey","mode","data","level","highestLevel","fireIntensity","npcCount","debrisCount","localStorage","getItem","setItem","addWaveEnemy","posXY","coord","addDebris","addFire","addNPC","nextModeLevel","initializeMode","propogateFire","burnEntities","allSaved","increaseIntensity","initializeGameData","setModeLevel","box","lyrics","ent","burn","placed","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","JSON","parse","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","frame","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","createCustomLevel","initializeMap","initializeUI","handleKeyPress","event","code","Button","props","onClick","className","React","Component","Keymap","entries","style","borderColor","Messages","Level","ENGINE","state","activeTab","createRef","setActiveScreen","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","setSelectedCharacter","Title","disabled","g","debrisPosArray","debrisPos","f","axe","Item","Characters","FireFighter","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","bg","naruto","reciever","responded","RECIEVE","sender","Components","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00aac058.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    passable: false,\n  },\n\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.messageType = messageType\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n    this.interrupt = interrupt\n    this.forcePlacement = forcePlacement\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.actor.release()) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    };\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless'}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGING')\n    this.draggedEntity = draggedEntity;\n  }\n\n  grab (pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile) return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (!this.draggedEntity && entity.entityTypes.includes('DRAGGABLE')) {\n        this.draggedEntity = entity;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  release () {\n    if (!this.draggedEntity) return false;\n    this.draggedEntity = null;\n    return true;\n  }\n\n  drag (lastPos) {\n    // update entity position\n    console.log('drag');\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)]\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) }\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n\n  move (targetPos) {\n    const lastPos = {...this.pos}\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n}\n\nconst Draggable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE')\n  }\n}\n\nconst Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPREADING')\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n\n  getAction (game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR'].includes(newTile.type)\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      \n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: {x: 0, y: 0},\n          game,\n          renderer: {\n            character: '*',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        })\n\n        this.timeToSpread = this.timeToSpreadMax\n        this.spreadCount -= 1\n        \n        return new Action.PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        })\n      }\n      this.timeToSpread = this.timeToSpreadMax\n      this.spreadCount -= 1\n    }\n\n    this.timeToSpread -= 1;\n    \n    return new Action.Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    })\n  }\n}\n\n  const Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SPEAKING')\n    this.messages = messages;\n    this.messageType = messageType\n  }\n\n  getAction (game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Action.Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n}\n\nconst Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('BURNABLE')\n  }\n\n  burn () {\n    this.decreaseDurability(1)\n    return true;\n  }\n}\n\nconst Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EXPLODING')\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n\n  enflame () {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      })\n    })\n\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire)\n    })\n  }\n\n  explode () {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1))\n      }, [])\n    };\n\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      }\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) tile.type = 'BURNT';\n    });\n\n    // this.game.draw(); //may not need draw here\n  }\n\n  destroy () {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n}\n\nconst Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HELPLESS')\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const FireSpread = pipe (\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\nexport const axe = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: 'P',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Bandit, RangedBandit, FireSpread } from '../../entites';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n}\n\nexport const addActor = (game) => {\n  // let targetEntity = game.engine.actors[game.engine.currentActor]\n  // let pos = Helper.getRandomPos(game.map).coordinates\n  // const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  // let actor = new banditStats.entityClass({\n  //   targetEntity,\n  //   pos,\n  //   renderer: banditStats.renderer,\n  //   name: banditStats.name,\n  //   game,\n  //   actions: [],\n  //   attackDamage: banditStats.attackDamage,\n  //   durability: banditStats.durability,\n  //   speed: banditStats.speed,\n  //   // directional projectile destruction breaks engine\n  //   getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n  //   // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  // })\n  let actor = new FireSpread({\n    name: 'Pyro',\n    game,\n    renderer: {\n      character: '*',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.red,\n    },\n    timeToSpread: 1,\n    spreadCount: 1,\n    durability: 1,\n    attackDamage: 1,\n    speed: 100,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { Shove } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Attack }from '../../actions'\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop Action',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap });\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor) => {\n  actor.setNextAction(\n    new Action.GrabDirection({\n      targetPos: { \n        x: actor.pos.x + direction[0],\n        y: actor.pos.y + direction[1],\n      },\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 18,\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  draw () {\n    this.layer.batchDraw();\n    // this.layer.draw();\n  }\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\nimport { addDebris  } from './Keymap/KeyActions/addDebris';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport { FireSpread, Speaker, Debris } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\n// const MAP_DATA = require('./Maps/building.json');\n// const MAP_DATA = require('./Maps/building_w_floor.json');\nconst MAP_DATA = require('./Maps/building_w_ambo.json');\nconst SOLANGE = require('./Data/solange.json');\n\nconst GAME_MODE_TYPES = {\n  WAVE: 0,\n  TEST: 1,\n  PLAY: 2,\n};\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 5;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    getSelectedCharacter = () => false,\n    display = new Display({\n      containerId: 'display',\n      width: (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET,\n      height: (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.PLAY,\n      data: {\n        level: 1,\n        highestLevel: null,\n        fireIntensity: 1, // increase this number to increase fire spread\n        npcCount: 1,\n        debrisCount: 4,\n      }\n    },\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    } \n    \n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      let array = Object.keys(this.map).filter((key) => this.map[key].type === 'FLOOR')\n\n      for (let index = 0; index < this.mode.data.debrisCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addDebris({ x: posXY[0], y: posXY[1] });\n      }\n\n      for (let index = 0; index < this.mode.data.fireIntensity; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addFire({x: posXY[0], y: posXY[1]});\n      }\n      \n      for (let index = 0; index < this.mode.data.npcCount; index++) {\n        let pos = Helper.getRandomInArray(array);\n        let posXY = pos.split(',').map((coord) => parseInt(coord));\n        this.addNPC({x: posXY[0], y: posXY[1]});\n      }\n        \n    }\n  }\n  \n  updateMode () { // this is run every game turn\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n\n    if (this.mode.type === GAME_MODE_TYPES.PLAY) {\n      this.propogateFire();\n      this.burnEntities();\n\n      // triggerd once all npcs are saved\n      if (this.allSaved()) { \n        this.nextModeLevel();\n        this.increaseIntensity()\n        this.initializeGameData();\n      }\n    }\n\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  // Fire Fight Specific\n\n  increaseIntensity () {\n    this.mode.data.fireIntensity += 1;\n    this.mode.data.npcCount += 1;\n    this.mode.data.debrisCount += 1;\n\n  }\n\n  allSaved () {\n    let allSaved = true;\n    const helpless = this.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n\n    helpless.forEach((actor) => {\n      const tile = this.map[Helper.coordsToString(actor.pos)];\n      if (tile.type !== 'SAFE') {\n        allSaved = false;\n      }\n    })\n\n    return allSaved;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 1) {\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background: Constant.THEMES.SOLARIZED.base01,\n      },\n      name,\n      game: this,\n      durability,\n    })\n\n    this.placeActorOnMap(box)\n    this.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: 'Tobi Lou',\n      messages: SOLANGE.lyrics,\n      messageType: MESSAGE_TYPE.STATUS_EFFECT,\n      pos,\n      game: this,\n      renderer: {\n        character: 'T',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.placeActorOnMap(entity)) {\n      this.engine.addActor(entity);\n      this.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this,\n      renderer: {\n        character: '*',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n    })\n\n    if (this.placeActorOnMap(fire)) {\n      this.engine.addActor(fire);\n      this.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.mode.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.map).filter((key) => this.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.map).filter((key) => this.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n      }\n    })\n  }\n\n  // End\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = JSON.parse(tile.data);\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n    this.display.draw();\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    // this.createLevel();\n    this.createCustomLevel(MAP_DATA);\n    this.initializeMap();\n    this.draw();\n    // this.randomlyPlaceAllActorsOnMap()\n    this.placeActorsOnMap()\n    this.initializeMode();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null} color='grey darken-1'>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ engine: ENGINE, getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE)})\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <p className='flow-text'>\n              Save all of the citizens from the burning building and get them to the safe zone!\n            </p>\n            <p className='flow-text'>\n              {`Wave ${this.state.game.mode.data.level}`}\n            </p>\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n            <Messages messages={this.state.game.messages.slice(-3).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              className={`CharacterSelect__button btn ${color}`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div className='flow-text grey-text'>Fire Fight RL</div>\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n        />\n          <button \n            className='btn' \n            onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}\n            disabled={!this.props.selectedCharacter}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions, createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine),\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      b: {\n        activate: () => Keymap.addDebris(engine.game),\n        label: 'Add Debris',\n      },\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add Actor',\n      },\n      f: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: 'Fire Fighter',\n    actions: [],\n    speed: 100,\n    durability: 4,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  const axe = Array(2).fill('').map(() => Item.axe(engine));\n  actor.container = [\n    new Entity.ContainerSlot({\n      itemType: axe[0].name,\n      items: axe,\n    }),\n  ]\n  return actor;\n}","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Debris } from '../../entites';\nimport * as Item from '../../items';\n\nexport const addDebris = (game, name = 'box', character = '%', durability = 10) => {    \n  let debrisPosArray = Object.keys(game.map).filter((key) => game.map[key].type === 'FLOOR')\n  let debrisPos = Helper.getRandomInArray(debrisPosArray);\n  let posXY = debrisPos.split(',').map((coord) => parseInt(coord))\n  let box = new Debris({\n    pos:{\n      x: posXY[0],\n      y: posXY[1]\n    },\n    renderer: {\n      character,\n      color: Constant.THEMES.SOLARIZED.base2,\n      background: Constant.THEMES.SOLARIZED.base01,\n    },\n    name,\n    game,\n    durability,\n  })\n  game.placeActorOnMap(box)\n  game.draw();\n}\n","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    // RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}